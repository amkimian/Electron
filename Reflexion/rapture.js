//
// Copyright (C) 2011-2013 Incapture Technologies LLC
// 
// This is an autogenerated license statement. When copyright notices appear below
// this one that copyright supercedes this statement.
//
// Unless required by applicable law or agreed to in writing, software is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.
//
// Unless explicit permission obtained in writing this software cannot be distributed.
//

// Autogenerated Javascript API for Rapture
//

var http = require('http');
var MD5 = require('./md5.js');
var querystring = require('querystring');
var site = "localhost";
var port = '8665';
var ctx = {};

exports.getContext = function() {
    return ctx;
}

exports.setConnection = function(s, p) {
     site = s;
     port = p;
}

function _genCall(prefix, fnname, params, callback) {
         var realparams = JSON.stringify(params);
         var postData = querystring.stringify({
        	 FUNCTION: fnname.toUpperCase(),
        	 PARAMS: realparams 
        });
        var options = {
           host: site,
           path: '/rapture/' + prefix.toLowerCase(),
           port: port,
           method: 'POST',
           headers: {
           'Content-Type': 'application/x-www-form-urlencoded',
           'Content-Length': postData.length
           }
        };
        if (ctx.hasOwnProperty('session') && ctx.session.hasOwnProperty('contextId')) {
              options.headers['x-rapture'] = ctx.session.contextId;
        }
        var dcallback = function(response) {
           var str = '';
           response.on('data', function(chunk) {
              str += chunk;
           });
           response.on('end', function() {
              callback(str);
           });
        } 
        
        var req = http.request(options, dcallback);
        req.write(postData);
        req.end();
  };
  
function _login(password, callback) {
	var hashPassword = MD5(password);
	var combinedBit = hashPassword + ":" + ctx.session.salt;
	var senderPassword = MD5(combinedBit);

	var sendParams = { 
                       "user" : ctx.username, 
                       "digest" : senderPassword, 
                       "context" : ctx.session.contextId,
                       "clientApiVersion": {"major": 1, "minor": 2, "micro": 2 } };
                       
     _genCall('login', 'LOGIN', sendParams,  callback);
};
	
exports.login = function(username, password, callback) {
	ctx.username = username;
	var sessionParams = { "user" : username };
	_genCall('login', 'CONTEXT', sessionParams, function(data) {
	    var info = JSON.parse(data);
	    if (info.inError) {
	    	callback(info.message, null);
	   	} else {
	    	ctx.session = info.response;
	    	_login(password, function(d) {
	    		var info = JSON.parse(d);
	    		if (info.inError) {
	    		   callback(info.response.message, null);
	    		} else {
	    		   callback(null, info.response);
	    		}
	    	});
	    }
	});
};

exports.getClientApiVersion = function(callback) {
          callback( null, { "major":1, "minor":2, "micro":2});
         };
        
   exports.Activity = {};
   exports.Bootstrap = {};
   exports.Script = {};
   exports.Lock = {};
   exports.Notification = {};
   exports.Table = {};
   exports.Index = {};
   exports.Admin = {};
   exports.Fountain = {};
   exports.Entitlement = {};
   exports.User = {};
   exports.Schedule = {};
   exports.Event = {};
   exports.Audit = {};
   exports.Mailbox = {};
   exports.Fields = {};
   exports.Blob = {};
   exports.Sheet = {};
   exports.Feature = {};
   exports.Pipeline = {};
   exports.Async = {};
   exports.Sys = {};
   exports.Runner = {};
   exports.Series = {};
   exports.Decision = {};
   exports.Repo = {};
   exports.Doc = {};
   exports.Relationship = {};
   exports.Operations = {};
   exports.Environment = {};
   exports.Question = {};
   exports.Structured = {};
    
    // Function for createActivity

exports.Activity.createActivity = function(message, progress, max, callback) {
                var callParams = {};
                   callParams.message = message;
                   callParams.progress = progress;
                   callParams.max = max;
                var theName = "createActivity";
                _genCall("Activity", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for updateActivity

exports.Activity.updateActivity = function(activityId, message, progress, max, callback) {
                var callParams = {};
                   callParams.activityId = activityId;
                   callParams.message = message;
                   callParams.progress = progress;
                   callParams.max = max;
                var theName = "updateActivity";
                _genCall("Activity", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for finishActivity

exports.Activity.finishActivity = function(activityId, message, callback) {
                var callParams = {};
                   callParams.activityId = activityId;
                   callParams.message = message;
                var theName = "finishActivity";
                _genCall("Activity", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for requestAbortActivity

exports.Activity.requestAbortActivity = function(activityId, message, callback) {
                var callParams = {};
                   callParams.activityId = activityId;
                   callParams.message = message;
                var theName = "requestAbortActivity";
                _genCall("Activity", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for queryByExpiryTime

exports.Activity.queryByExpiryTime = function(nextBatchId, batchSize, lastSeen, callback) {
                var callParams = {};
                   callParams.nextBatchId = nextBatchId;
                   callParams.batchSize = batchSize;
                   callParams.lastSeen = lastSeen;
                var theName = "queryByExpiryTime";
                _genCall("Activity", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getById

exports.Activity.getById = function(activityId, callback) {
                var callParams = {};
                   callParams.activityId = activityId;
                var theName = "getById";
                _genCall("Activity", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setEmphemeralRepo

exports.Bootstrap.setEmphemeralRepo = function(config, callback) {
                var callParams = {};
                   callParams.config = config;
                var theName = "setEmphemeralRepo";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setConfigRepo

exports.Bootstrap.setConfigRepo = function(config, callback) {
                var callParams = {};
                   callParams.config = config;
                var theName = "setConfigRepo";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setSettingsRepo

exports.Bootstrap.setSettingsRepo = function(config, callback) {
                var callParams = {};
                   callParams.config = config;
                var theName = "setSettingsRepo";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for migrateConfigRepo

exports.Bootstrap.migrateConfigRepo = function(newConfig, callback) {
                var callParams = {};
                   callParams.newConfig = newConfig;
                var theName = "migrateConfigRepo";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for migrateEphemeralRepo

exports.Bootstrap.migrateEphemeralRepo = function(newConfig, callback) {
                var callParams = {};
                   callParams.newConfig = newConfig;
                var theName = "migrateEphemeralRepo";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for migrateSettingsRepo

exports.Bootstrap.migrateSettingsRepo = function(newConfig, callback) {
                var callParams = {};
                   callParams.newConfig = newConfig;
                var theName = "migrateSettingsRepo";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getConfigRepo

exports.Bootstrap.getConfigRepo = function(callback) {
                var callParams = {};
                var theName = "getConfigRepo";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSettingsRepo

exports.Bootstrap.getSettingsRepo = function(callback) {
                var callParams = {};
                var theName = "getSettingsRepo";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEphemeralRepo

exports.Bootstrap.getEphemeralRepo = function(callback) {
                var callParams = {};
                var theName = "getEphemeralRepo";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for restartBootstrap

exports.Bootstrap.restartBootstrap = function(callback) {
                var callParams = {};
                var theName = "restartBootstrap";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addScriptClass

exports.Bootstrap.addScriptClass = function(keyword, className, callback) {
                var callParams = {};
                   callParams.keyword = keyword;
                   callParams.className = className;
                var theName = "addScriptClass";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getScriptClasses

exports.Bootstrap.getScriptClasses = function(callback) {
                var callParams = {};
                var theName = "getScriptClasses";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteScriptClass

exports.Bootstrap.deleteScriptClass = function(keyword, callback) {
                var callParams = {};
                   callParams.keyword = keyword;
                var theName = "deleteScriptClass";
                _genCall("Bootstrap", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createScript

exports.Script.createScript = function(scriptURI, language, purpose, script, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                   callParams.language = language;
                   callParams.purpose = purpose;
                   callParams.script = script;
                var theName = "createScript";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createScriptLink

exports.Script.createScriptLink = function(fromScriptURI, toScriptURI, callback) {
                var callParams = {};
                   callParams.fromScriptURI = fromScriptURI;
                   callParams.toScriptURI = toScriptURI;
                var theName = "createScriptLink";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeScriptLink

exports.Script.removeScriptLink = function(fromScriptURI, callback) {
                var callParams = {};
                   callParams.fromScriptURI = fromScriptURI;
                var theName = "removeScriptLink";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setScriptParameters

exports.Script.setScriptParameters = function(scriptURI, parameters, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                   callParams.parameters = parameters;
                var theName = "setScriptParameters";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesScriptExist

exports.Script.doesScriptExist = function(scriptURI, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                var theName = "doesScriptExist";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteScript

exports.Script.deleteScript = function(scriptURI, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                var theName = "deleteScript";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getScriptNames

exports.Script.getScriptNames = function(scriptURI, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                var theName = "getScriptNames";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Script.getChildren = function(scriptURI, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                var theName = "getChildren";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeFolder

exports.Script.removeFolder = function(scriptURI, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                var theName = "removeFolder";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getScript

exports.Script.getScript = function(scriptURI, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                var theName = "getScript";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putScript

exports.Script.putScript = function(scriptURI, script, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                   callParams.script = script;
                var theName = "putScript";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putRawScript

exports.Script.putRawScript = function(scriptURI, content, language, purpose, param_types, param_names, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                   callParams.content = content;
                   callParams.language = language;
                   callParams.purpose = purpose;
                   callParams.param_types = param_types;
                   callParams.param_names = param_names;
                var theName = "putRawScript";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runScript

exports.Script.runScript = function(scriptURI, parameters, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                   callParams.parameters = parameters;
                var theName = "runScript";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runScriptExtended

exports.Script.runScriptExtended = function(scriptURI, parameters, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                   callParams.parameters = parameters;
                var theName = "runScriptExtended";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for checkScript

exports.Script.checkScript = function(scriptURI, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                var theName = "checkScript";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createREPLSession

exports.Script.createREPLSession = function(callback) {
                var callParams = {};
                var theName = "createREPLSession";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for destroyREPLSession

exports.Script.destroyREPLSession = function(sessionId, callback) {
                var callParams = {};
                   callParams.sessionId = sessionId;
                var theName = "destroyREPLSession";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for evaluateREPL

exports.Script.evaluateREPL = function(sessionId, line, callback) {
                var callParams = {};
                   callParams.sessionId = sessionId;
                   callParams.line = line;
                var theName = "evaluateREPL";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for archiveOldREPLSessions

exports.Script.archiveOldREPLSessions = function(ageInMinutes, callback) {
                var callParams = {};
                   callParams.ageInMinutes = ageInMinutes;
                var theName = "archiveOldREPLSessions";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createSnippet

exports.Script.createSnippet = function(snippetURI, snippet, callback) {
                var callParams = {};
                   callParams.snippetURI = snippetURI;
                   callParams.snippet = snippet;
                var theName = "createSnippet";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSnippetChildren

exports.Script.getSnippetChildren = function(prefix, callback) {
                var callParams = {};
                   callParams.prefix = prefix;
                var theName = "getSnippetChildren";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteSnippet

exports.Script.deleteSnippet = function(snippetURI, callback) {
                var callParams = {};
                   callParams.snippetURI = snippetURI;
                var theName = "deleteSnippet";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSnippet

exports.Script.getSnippet = function(snippetURI, callback) {
                var callParams = {};
                   callParams.snippetURI = snippetURI;
                var theName = "getSnippet";
                _genCall("Script", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getLockProvidersForAuthority

exports.Lock.getLockProvidersForAuthority = function(providerURI, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                var theName = "getLockProvidersForAuthority";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createLockProvider

exports.Lock.createLockProvider = function(providerURI, config, pathPosition, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                   callParams.config = config;
                   callParams.pathPosition = pathPosition;
                var theName = "createLockProvider";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesLockProviderExist

exports.Lock.doesLockProviderExist = function(providerURI, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                var theName = "doesLockProviderExist";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getLockProvider

exports.Lock.getLockProvider = function(providerURI, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                var theName = "getLockProvider";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteLockProvider

exports.Lock.deleteLockProvider = function(providerURI, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                var theName = "deleteLockProvider";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for acquireLock

exports.Lock.acquireLock = function(providerURI, lockName, secondsToWait, secondsToKeep, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                   callParams.lockName = lockName;
                   callParams.secondsToWait = secondsToWait;
                   callParams.secondsToKeep = secondsToKeep;
                var theName = "acquireLock";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for acquireLockWithContext

exports.Lock.acquireLockWithContext = function(providerURI, lockName, localContext, secondsToWait, secondsToKeep, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                   callParams.lockName = lockName;
                   callParams.localContext = localContext;
                   callParams.secondsToWait = secondsToWait;
                   callParams.secondsToKeep = secondsToKeep;
                var theName = "acquireLockWithContext";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for releaseLock

exports.Lock.releaseLock = function(providerURI, lockName, lockHandle, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                   callParams.lockName = lockName;
                   callParams.lockHandle = lockHandle;
                var theName = "releaseLock";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for breakLock

exports.Lock.breakLock = function(providerURI, lockName, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                   callParams.lockName = lockName;
                var theName = "breakLock";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for releaseLockWithContext

exports.Lock.releaseLockWithContext = function(providerURI, lockName, lockHandle, localContext, callback) {
                var callParams = {};
                   callParams.providerURI = providerURI;
                   callParams.lockName = lockName;
                   callParams.lockHandle = lockHandle;
                   callParams.localContext = localContext;
                var theName = "releaseLockWithContext";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setupDefaultProviders

exports.Lock.setupDefaultProviders = function(force, callback) {
                var callParams = {};
                   callParams.force = force;
                var theName = "setupDefaultProviders";
                _genCall("Lock", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllNotificationProviders

exports.Notification.getAllNotificationProviders = function(callback) {
                var callParams = {};
                var theName = "getAllNotificationProviders";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Notification.getChildren = function(notificationNamePrefix, callback) {
                var callParams = {};
                   callParams.notificationNamePrefix = notificationNamePrefix;
                var theName = "getChildren";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getNotificationProviders

exports.Notification.getNotificationProviders = function(purpose, callback) {
                var callParams = {};
                   callParams.purpose = purpose;
                var theName = "getNotificationProviders";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createNotificationProvider

exports.Notification.createNotificationProvider = function(notificationName, config, purpose, callback) {
                var callParams = {};
                   callParams.notificationName = notificationName;
                   callParams.config = config;
                   callParams.purpose = purpose;
                var theName = "createNotificationProvider";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesNotificationProviderExist

exports.Notification.doesNotificationProviderExist = function(notificationName, callback) {
                var callParams = {};
                   callParams.notificationName = notificationName;
                var theName = "doesNotificationProviderExist";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getNotificationProvider

exports.Notification.getNotificationProvider = function(notificationName, callback) {
                var callParams = {};
                   callParams.notificationName = notificationName;
                var theName = "getNotificationProvider";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteNotificationProvider

exports.Notification.deleteNotificationProvider = function(notificationName, callback) {
                var callParams = {};
                   callParams.notificationName = notificationName;
                var theName = "deleteNotificationProvider";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEpoch

exports.Notification.getEpoch = function(notificationName, callback) {
                var callParams = {};
                   callParams.notificationName = notificationName;
                var theName = "getEpoch";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for publishNotification

exports.Notification.publishNotification = function(notificationName, referenceId, content, contentType, callback) {
                var callParams = {};
                   callParams.notificationName = notificationName;
                   callParams.referenceId = referenceId;
                   callParams.content = content;
                   callParams.contentType = contentType;
                var theName = "publishNotification";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChanges

exports.Notification.getChanges = function(notificationName, lastEpochSeen, callback) {
                var callParams = {};
                   callParams.notificationName = notificationName;
                   callParams.lastEpochSeen = lastEpochSeen;
                var theName = "getChanges";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getNotification

exports.Notification.getNotification = function(notificationName, id, callback) {
                var callParams = {};
                   callParams.notificationName = notificationName;
                   callParams.id = id;
                var theName = "getNotification";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for recordActivity

exports.Notification.recordActivity = function(myId, message, progress, maxProgress, secondToExpire, callback) {
                var callParams = {};
                   callParams.myId = myId;
                   callParams.message = message;
                   callParams.progress = progress;
                   callParams.maxProgress = maxProgress;
                   callParams.secondToExpire = secondToExpire;
                var theName = "recordActivity";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for updateActivity

exports.Notification.updateActivity = function(id, myId, message, progress, maxProgress, secondToExpire, callback) {
                var callParams = {};
                   callParams.id = id;
                   callParams.myId = myId;
                   callParams.message = message;
                   callParams.progress = progress;
                   callParams.maxProgress = maxProgress;
                   callParams.secondToExpire = secondToExpire;
                var theName = "updateActivity";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for finishActivity

exports.Notification.finishActivity = function(id, myId, message, callback) {
                var callParams = {};
                   callParams.id = id;
                   callParams.myId = myId;
                   callParams.message = message;
                var theName = "finishActivity";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for requestAbortActivity

exports.Notification.requestAbortActivity = function(id, myId, callback) {
                var callParams = {};
                   callParams.id = id;
                   callParams.myId = myId;
                var theName = "requestAbortActivity";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getActivities

exports.Notification.getActivities = function(callback) {
                var callParams = {};
                var theName = "getActivities";
                _genCall("Notification", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createTable

exports.Table.createTable = function(indexURI, config, callback) {
                var callParams = {};
                   callParams.indexURI = indexURI;
                   callParams.config = config;
                var theName = "createTable";
                _genCall("Table", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getTablesForAuthority

exports.Table.getTablesForAuthority = function(authority, callback) {
                var callParams = {};
                   callParams.authority = authority;
                var theName = "getTablesForAuthority";
                _genCall("Table", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getTable

exports.Table.getTable = function(indexURI, callback) {
                var callParams = {};
                   callParams.indexURI = indexURI;
                var theName = "getTable";
                _genCall("Table", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteTable

exports.Table.deleteTable = function(indexURI, callback) {
                var callParams = {};
                   callParams.indexURI = indexURI;
                var theName = "deleteTable";
                _genCall("Table", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for queryTable

exports.Table.queryTable = function(indexURI, query, callback) {
                var callParams = {};
                   callParams.indexURI = indexURI;
                   callParams.query = query;
                var theName = "queryTable";
                _genCall("Table", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createIndex

exports.Index.createIndex = function(indexURI, config, callback) {
                var callParams = {};
                   callParams.indexURI = indexURI;
                   callParams.config = config;
                var theName = "createIndex";
                _genCall("Index", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getIndex

exports.Index.getIndex = function(indexURI, callback) {
                var callParams = {};
                   callParams.indexURI = indexURI;
                var theName = "getIndex";
                _genCall("Index", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteIndex

exports.Index.deleteIndex = function(indexURI, callback) {
                var callParams = {};
                   callParams.indexURI = indexURI;
                var theName = "deleteIndex";
                _genCall("Index", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for queryIndex

exports.Index.queryIndex = function(indexURI, query, callback) {
                var callParams = {};
                   callParams.indexURI = indexURI;
                   callParams.query = query;
                var theName = "queryIndex";
                _genCall("Index", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSystemProperties

exports.Admin.getSystemProperties = function(keys, callback) {
                var callParams = {};
                   callParams.keys = keys;
                var theName = "getSystemProperties";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRepoConfig

exports.Admin.getRepoConfig = function(callback) {
                var callParams = {};
                var theName = "getRepoConfig";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSessionsForUser

exports.Admin.getSessionsForUser = function(user, callback) {
                var callParams = {};
                   callParams.user = user;
                var theName = "getSessionsForUser";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getTags

exports.Admin.getTags = function(raptureURI, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                var theName = "getTags";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteUser

exports.Admin.deleteUser = function(userName, callback) {
                var callParams = {};
                   callParams.userName = userName;
                var theName = "deleteUser";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for destroyUser

exports.Admin.destroyUser = function(userName, callback) {
                var callParams = {};
                   callParams.userName = userName;
                var theName = "destroyUser";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for restoreUser

exports.Admin.restoreUser = function(userName, callback) {
                var callParams = {};
                   callParams.userName = userName;
                var theName = "restoreUser";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addUser

exports.Admin.addUser = function(userName, description, hashPassword, email, callback) {
                var callParams = {};
                   callParams.userName = userName;
                   callParams.description = description;
                   callParams.hashPassword = hashPassword;
                   callParams.email = email;
                var theName = "addUser";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesUserExist

exports.Admin.doesUserExist = function(userName, callback) {
                var callParams = {};
                   callParams.userName = userName;
                var theName = "doesUserExist";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getUser

exports.Admin.getUser = function(userName, callback) {
                var callParams = {};
                   callParams.userName = userName;
                var theName = "getUser";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for generateApiUser

exports.Admin.generateApiUser = function(prefix, description, callback) {
                var callParams = {};
                   callParams.prefix = prefix;
                   callParams.description = description;
                var theName = "generateApiUser";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for resetUserPassword

exports.Admin.resetUserPassword = function(userName, newHashPassword, callback) {
                var callParams = {};
                   callParams.userName = userName;
                   callParams.newHashPassword = newHashPassword;
                var theName = "resetUserPassword";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for updateUserEmail

exports.Admin.updateUserEmail = function(userName, newEmail, callback) {
                var callParams = {};
                   callParams.userName = userName;
                   callParams.newEmail = newEmail;
                var theName = "updateUserEmail";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRemotes

exports.Admin.getRemotes = function(callback) {
                var callParams = {};
                var theName = "getRemotes";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addRemote

exports.Admin.addRemote = function(name, description, url, apiKey, optP, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.description = description;
                   callParams.url = url;
                   callParams.apiKey = apiKey;
                   callParams.optP = optP;
                var theName = "addRemote";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteRemote

exports.Admin.deleteRemote = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "deleteRemote";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for updateRemoteApiKey

exports.Admin.updateRemoteApiKey = function(name, apiKey, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.apiKey = apiKey;
                var theName = "updateRemoteApiKey";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setRemote

exports.Admin.setRemote = function(raptureURI, remote, remoteURI, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.remote = remote;
                   callParams.remoteURI = remoteURI;
                var theName = "setRemote";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for clearRemote

exports.Admin.clearRemote = function(raptureURI, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                var theName = "clearRemote";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for pullRemote

exports.Admin.pullRemote = function(raptureURI, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                var theName = "pullRemote";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addTemplate

exports.Admin.addTemplate = function(name, template, overwrite, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.template = template;
                   callParams.overwrite = overwrite;
                var theName = "addTemplate";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runTemplate

exports.Admin.runTemplate = function(name, parameters, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.parameters = parameters;
                var theName = "runTemplate";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getTemplate

exports.Admin.getTemplate = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "getTemplate";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for copyDocumentRepo

exports.Admin.copyDocumentRepo = function(srcAuthority, targAuthority, wipe, callback) {
                var callParams = {};
                   callParams.srcAuthority = srcAuthority;
                   callParams.targAuthority = targAuthority;
                   callParams.wipe = wipe;
                var theName = "copyDocumentRepo";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addIPToWhiteList

exports.Admin.addIPToWhiteList = function(ipAddress, callback) {
                var callParams = {};
                   callParams.ipAddress = ipAddress;
                var theName = "addIPToWhiteList";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeIPFromWhiteList

exports.Admin.removeIPFromWhiteList = function(ipAddress, callback) {
                var callParams = {};
                   callParams.ipAddress = ipAddress;
                var theName = "removeIPFromWhiteList";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getIPWhiteList

exports.Admin.getIPWhiteList = function(callback) {
                var callParams = {};
                var theName = "getIPWhiteList";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runBatchScript

exports.Admin.runBatchScript = function(script, callback) {
                var callParams = {};
                   callParams.script = script;
                var theName = "runBatchScript";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllUsers

exports.Admin.getAllUsers = function(callback) {
                var callParams = {};
                var theName = "getAllUsers";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for initiateTypeConversion

exports.Admin.initiateTypeConversion = function(raptureURI, newConfig, versionsToKeep, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.newConfig = newConfig;
                   callParams.versionsToKeep = versionsToKeep;
                var theName = "initiateTypeConversion";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putArchiveConfig

exports.Admin.putArchiveConfig = function(raptureURI, config, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.config = config;
                var theName = "putArchiveConfig";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getArchiveConfig

exports.Admin.getArchiveConfig = function(raptureURI, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                var theName = "getArchiveConfig";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteArchiveConfig

exports.Admin.deleteArchiveConfig = function(raptureURI, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                var theName = "deleteArchiveConfig";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for ping

exports.Admin.ping = function(callback) {
                var callParams = {};
                var theName = "ping";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addMetadata

exports.Admin.addMetadata = function(values, overwrite, callback) {
                var callParams = {};
                   callParams.values = values;
                   callParams.overwrite = overwrite;
                var theName = "addMetadata";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setMOTD

exports.Admin.setMOTD = function(message, callback) {
                var callParams = {};
                   callParams.message = message;
                var theName = "setMOTD";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getMOTD

exports.Admin.getMOTD = function(callback) {
                var callParams = {};
                var theName = "getMOTD";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setEnvironmentName

exports.Admin.setEnvironmentName = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "setEnvironmentName";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setEnvironmentProperties

exports.Admin.setEnvironmentProperties = function(properties, callback) {
                var callParams = {};
                   callParams.properties = properties;
                var theName = "setEnvironmentProperties";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEnvironmentName

exports.Admin.getEnvironmentName = function(callback) {
                var callParams = {};
                var theName = "getEnvironmentName";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEnvironmentProperties

exports.Admin.getEnvironmentProperties = function(callback) {
                var callParams = {};
                var theName = "getEnvironmentProperties";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for encode

exports.Admin.encode = function(toEncode, callback) {
                var callParams = {};
                   callParams.toEncode = toEncode;
                var theName = "encode";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createURI

exports.Admin.createURI = function(path, leaf, callback) {
                var callParams = {};
                   callParams.path = path;
                   callParams.leaf = leaf;
                var theName = "createURI";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createMultipartURI

exports.Admin.createMultipartURI = function(elements, callback) {
                var callParams = {};
                   callParams.elements = elements;
                var theName = "createMultipartURI";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for decode

exports.Admin.decode = function(encoded, callback) {
                var callParams = {};
                   callParams.encoded = encoded;
                var theName = "decode";
                _genCall("Admin", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getFountains

exports.Fountain.getFountains = function(authority, callback) {
                var callParams = {};
                   callParams.authority = authority;
                var theName = "getFountains";
                _genCall("Fountain", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getFountain

exports.Fountain.getFountain = function(fountainURI, callback) {
                var callParams = {};
                   callParams.fountainURI = fountainURI;
                var theName = "getFountain";
                _genCall("Fountain", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createFountain

exports.Fountain.createFountain = function(fountainURI, config, callback) {
                var callParams = {};
                   callParams.fountainURI = fountainURI;
                   callParams.config = config;
                var theName = "createFountain";
                _genCall("Fountain", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesFountainExist

exports.Fountain.doesFountainExist = function(fountainURI, callback) {
                var callParams = {};
                   callParams.fountainURI = fountainURI;
                var theName = "doesFountainExist";
                _genCall("Fountain", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteFountain

exports.Fountain.deleteFountain = function(fountainURI, callback) {
                var callParams = {};
                   callParams.fountainURI = fountainURI;
                var theName = "deleteFountain";
                _genCall("Fountain", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for resetFountain

exports.Fountain.resetFountain = function(fountainURI, count, callback) {
                var callParams = {};
                   callParams.fountainURI = fountainURI;
                   callParams.count = count;
                var theName = "resetFountain";
                _genCall("Fountain", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for incrementFountain

exports.Fountain.incrementFountain = function(fountainURI, amount, callback) {
                var callParams = {};
                   callParams.fountainURI = fountainURI;
                   callParams.amount = amount;
                var theName = "incrementFountain";
                _genCall("Fountain", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setupDefaultFountains

exports.Fountain.setupDefaultFountains = function(force, callback) {
                var callParams = {};
                   callParams.force = force;
                var theName = "setupDefaultFountains";
                _genCall("Fountain", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEntitlements

exports.Entitlement.getEntitlements = function(callback) {
                var callParams = {};
                var theName = "getEntitlements";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEntitlement

exports.Entitlement.getEntitlement = function(entitlementName, callback) {
                var callParams = {};
                   callParams.entitlementName = entitlementName;
                var theName = "getEntitlement";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEntitlementByAddress

exports.Entitlement.getEntitlementByAddress = function(entitlementURI, callback) {
                var callParams = {};
                   callParams.entitlementURI = entitlementURI;
                var theName = "getEntitlementByAddress";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEntitlementGroup

exports.Entitlement.getEntitlementGroup = function(groupName, callback) {
                var callParams = {};
                   callParams.groupName = groupName;
                var theName = "getEntitlementGroup";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEntitlementGroupByAddress

exports.Entitlement.getEntitlementGroupByAddress = function(groupURI, callback) {
                var callParams = {};
                   callParams.groupURI = groupURI;
                var theName = "getEntitlementGroupByAddress";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEntitlementGroups

exports.Entitlement.getEntitlementGroups = function(callback) {
                var callParams = {};
                var theName = "getEntitlementGroups";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addEntitlement

exports.Entitlement.addEntitlement = function(entitlementName, initialGroup, callback) {
                var callParams = {};
                   callParams.entitlementName = entitlementName;
                   callParams.initialGroup = initialGroup;
                var theName = "addEntitlement";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addGroupToEntitlement

exports.Entitlement.addGroupToEntitlement = function(entitlementName, groupName, callback) {
                var callParams = {};
                   callParams.entitlementName = entitlementName;
                   callParams.groupName = groupName;
                var theName = "addGroupToEntitlement";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeGroupFromEntitlement

exports.Entitlement.removeGroupFromEntitlement = function(entitlementName, groupName, callback) {
                var callParams = {};
                   callParams.entitlementName = entitlementName;
                   callParams.groupName = groupName;
                var theName = "removeGroupFromEntitlement";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteEntitlement

exports.Entitlement.deleteEntitlement = function(entitlementName, callback) {
                var callParams = {};
                   callParams.entitlementName = entitlementName;
                var theName = "deleteEntitlement";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteEntitlementGroup

exports.Entitlement.deleteEntitlementGroup = function(groupName, callback) {
                var callParams = {};
                   callParams.groupName = groupName;
                var theName = "deleteEntitlementGroup";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addEntitlementGroup

exports.Entitlement.addEntitlementGroup = function(groupName, callback) {
                var callParams = {};
                   callParams.groupName = groupName;
                var theName = "addEntitlementGroup";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addUserToEntitlementGroup

exports.Entitlement.addUserToEntitlementGroup = function(groupName, userName, callback) {
                var callParams = {};
                   callParams.groupName = groupName;
                   callParams.userName = userName;
                var theName = "addUserToEntitlementGroup";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeUserFromEntitlementGroup

exports.Entitlement.removeUserFromEntitlementGroup = function(groupName, userName, callback) {
                var callParams = {};
                   callParams.groupName = groupName;
                   callParams.userName = userName;
                var theName = "removeUserFromEntitlementGroup";
                _genCall("Entitlement", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWhoAmI

exports.User.getWhoAmI = function(callback) {
                var callParams = {};
                var theName = "getWhoAmI";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for logoutUser

exports.User.logoutUser = function(callback) {
                var callParams = {};
                var theName = "logoutUser";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for storePreference

exports.User.storePreference = function(category, name, content, callback) {
                var callParams = {};
                   callParams.category = category;
                   callParams.name = name;
                   callParams.content = content;
                var theName = "storePreference";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getPreference

exports.User.getPreference = function(category, name, callback) {
                var callParams = {};
                   callParams.category = category;
                   callParams.name = name;
                var theName = "getPreference";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removePreference

exports.User.removePreference = function(category, name, callback) {
                var callParams = {};
                   callParams.category = category;
                   callParams.name = name;
                var theName = "removePreference";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getPreferenceCategories

exports.User.getPreferenceCategories = function(callback) {
                var callParams = {};
                var theName = "getPreferenceCategories";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getPreferencesInCategory

exports.User.getPreferencesInCategory = function(category, callback) {
                var callParams = {};
                   callParams.category = category;
                var theName = "getPreferencesInCategory";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for updateMyDescription

exports.User.updateMyDescription = function(description, callback) {
                var callParams = {};
                   callParams.description = description;
                var theName = "updateMyDescription";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for changeMyPassword

exports.User.changeMyPassword = function(oldHashPassword, newHashPassword, callback) {
                var callParams = {};
                   callParams.oldHashPassword = oldHashPassword;
                   callParams.newHashPassword = newHashPassword;
                var theName = "changeMyPassword";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getServerApiVersion

exports.User.getServerApiVersion = function(callback) {
                var callParams = {};
                var theName = "getServerApiVersion";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runFilterCubeView

exports.User.runFilterCubeView = function(typeURI, scriptURI, filterParams, groupFields, columnFields, callback) {
                var callParams = {};
                   callParams.typeURI = typeURI;
                   callParams.scriptURI = scriptURI;
                   callParams.filterParams = filterParams;
                   callParams.groupFields = groupFields;
                   callParams.columnFields = columnFields;
                var theName = "runFilterCubeView";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runNativeQuery

exports.User.runNativeQuery = function(typeURI, repoType, queryParams, callback) {
                var callParams = {};
                   callParams.typeURI = typeURI;
                   callParams.repoType = repoType;
                   callParams.queryParams = queryParams;
                var theName = "runNativeQuery";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runNativeFilterCubeView

exports.User.runNativeFilterCubeView = function(typeURI, repoType, queryParams, groupFields, columnFields, callback) {
                var callParams = {};
                   callParams.typeURI = typeURI;
                   callParams.repoType = repoType;
                   callParams.queryParams = queryParams;
                   callParams.groupFields = groupFields;
                   callParams.columnFields = columnFields;
                var theName = "runNativeFilterCubeView";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for isPermitted

exports.User.isPermitted = function(apiCall, callParam, callback) {
                var callParams = {};
                   callParams.apiCall = apiCall;
                   callParams.callParam = callParam;
                var theName = "isPermitted";
                _genCall("User", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createJob

exports.Schedule.createJob = function(jobURI, description, scriptURI, cronExpression, timeZone, jobParams, autoActivate, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                   callParams.description = description;
                   callParams.scriptURI = scriptURI;
                   callParams.cronExpression = cronExpression;
                   callParams.timeZone = timeZone;
                   callParams.jobParams = jobParams;
                   callParams.autoActivate = autoActivate;
                var theName = "createJob";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createWorkflowJob

exports.Schedule.createWorkflowJob = function(jobURI, description, workflowURI, cronExpression, timeZone, jobParams, autoActivate, maxRuntimeMinutes, appStatusNamePattern, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                   callParams.description = description;
                   callParams.workflowURI = workflowURI;
                   callParams.cronExpression = cronExpression;
                   callParams.timeZone = timeZone;
                   callParams.jobParams = jobParams;
                   callParams.autoActivate = autoActivate;
                   callParams.maxRuntimeMinutes = maxRuntimeMinutes;
                   callParams.appStatusNamePattern = appStatusNamePattern;
                var theName = "createWorkflowJob";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for activateJob

exports.Schedule.activateJob = function(jobURI, extraParams, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                   callParams.extraParams = extraParams;
                var theName = "activateJob";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deactivateJob

exports.Schedule.deactivateJob = function(jobURI, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                var theName = "deactivateJob";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for retrieveJob

exports.Schedule.retrieveJob = function(jobURI, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                var theName = "retrieveJob";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for retrieveJobs

exports.Schedule.retrieveJobs = function(uriPrefix, callback) {
                var callParams = {};
                   callParams.uriPrefix = uriPrefix;
                var theName = "retrieveJobs";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runJobNow

exports.Schedule.runJobNow = function(jobURI, extraParams, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                   callParams.extraParams = extraParams;
                var theName = "runJobNow";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for resetJob

exports.Schedule.resetJob = function(jobURI, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                var theName = "resetJob";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for retrieveJobExec

exports.Schedule.retrieveJobExec = function(jobURI, execTime, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                   callParams.execTime = execTime;
                var theName = "retrieveJobExec";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteJob

exports.Schedule.deleteJob = function(jobURI, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                var theName = "deleteJob";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getJobs

exports.Schedule.getJobs = function(callback) {
                var callParams = {};
                var theName = "getJobs";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getUpcomingJobs

exports.Schedule.getUpcomingJobs = function(callback) {
                var callParams = {};
                var theName = "getUpcomingJobs";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorkflowExecsStatus

exports.Schedule.getWorkflowExecsStatus = function(callback) {
                var callParams = {};
                var theName = "getWorkflowExecsStatus";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for ackJobError

exports.Schedule.ackJobError = function(jobURI, execTime, jobErrorType, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                   callParams.execTime = execTime;
                   callParams.jobErrorType = jobErrorType;
                var theName = "ackJobError";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getNextExec

exports.Schedule.getNextExec = function(jobURI, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                var theName = "getNextExec";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getJobExecs

exports.Schedule.getJobExecs = function(jobURI, start, count, reversed, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                   callParams.start = start;
                   callParams.count = count;
                   callParams.reversed = reversed;
                var theName = "getJobExecs";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for batchGetJobExecs

exports.Schedule.batchGetJobExecs = function(jobURI, start, count, reversed, callback) {
                var callParams = {};
                   callParams.jobURI = jobURI;
                   callParams.start = start;
                   callParams.count = count;
                   callParams.reversed = reversed;
                var theName = "batchGetJobExecs";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for isJobReadyToRun

exports.Schedule.isJobReadyToRun = function(toJobURI, callback) {
                var callParams = {};
                   callParams.toJobURI = toJobURI;
                var theName = "isJobReadyToRun";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getCurrentWeekTimeRecords

exports.Schedule.getCurrentWeekTimeRecords = function(weekOffsetfromNow, callback) {
                var callParams = {};
                   callParams.weekOffsetfromNow = weekOffsetfromNow;
                var theName = "getCurrentWeekTimeRecords";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getCurrentDayJobs

exports.Schedule.getCurrentDayJobs = function(callback) {
                var callParams = {};
                var theName = "getCurrentDayJobs";
                _genCall("Schedule", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEvent

exports.Event.getEvent = function(eventURI, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                var theName = "getEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putEvent

exports.Event.putEvent = function(event, callback) {
                var callParams = {};
                   callParams.event = event;
                var theName = "putEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteEvent

exports.Event.deleteEvent = function(eventURI, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                var theName = "deleteEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Event.getChildren = function(eventURIPrefix, callback) {
                var callParams = {};
                   callParams.eventURIPrefix = eventURIPrefix;
                var theName = "getChildren";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for attachScriptToEvent

exports.Event.attachScriptToEvent = function(eventURI, scriptURI, performOnce, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.scriptURI = scriptURI;
                   callParams.performOnce = performOnce;
                var theName = "attachScriptToEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeScriptFromEvent

exports.Event.removeScriptFromEvent = function(eventURI, scriptURI, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.scriptURI = scriptURI;
                var theName = "removeScriptFromEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for attachMessageToEvent

exports.Event.attachMessageToEvent = function(eventURI, name, pipeline, params, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.name = name;
                   callParams.pipeline = pipeline;
                   callParams.params = params;
                var theName = "attachMessageToEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeMessageFromEvent

exports.Event.removeMessageFromEvent = function(eventURI, name, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.name = name;
                var theName = "removeMessageFromEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for attachNotificationToEvent

exports.Event.attachNotificationToEvent = function(eventURI, name, notification, params, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.name = name;
                   callParams.notification = notification;
                   callParams.params = params;
                var theName = "attachNotificationToEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeNotificationFromEvent

exports.Event.removeNotificationFromEvent = function(eventURI, name, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.name = name;
                var theName = "removeNotificationFromEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for attachWorkflowToEvent

exports.Event.attachWorkflowToEvent = function(eventURI, name, workflowUri, params, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.name = name;
                   callParams.workflowUri = workflowUri;
                   callParams.params = params;
                var theName = "attachWorkflowToEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeWorkflowFromEvent

exports.Event.removeWorkflowFromEvent = function(eventURI, name, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.name = name;
                var theName = "removeWorkflowFromEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for fireEvent

exports.Event.fireEvent = function(eventURI, associatedURI, eventContext, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.associatedURI = associatedURI;
                   callParams.eventContext = eventContext;
                var theName = "fireEvent";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for fireEventWithContextMap

exports.Event.fireEventWithContextMap = function(eventURI, associatedURI, eventContextMap, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                   callParams.associatedURI = associatedURI;
                   callParams.eventContextMap = eventContextMap;
                var theName = "fireEventWithContextMap";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesEventExist

exports.Event.doesEventExist = function(eventURI, callback) {
                var callParams = {};
                   callParams.eventURI = eventURI;
                var theName = "doesEventExist";
                _genCall("Event", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setup

exports.Audit.setup = function(force, callback) {
                var callParams = {};
                   callParams.force = force;
                var theName = "setup";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createAuditLog

exports.Audit.createAuditLog = function(name, config, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.config = config;
                var theName = "createAuditLog";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesAuditLogExist

exports.Audit.doesAuditLogExist = function(logURI, callback) {
                var callParams = {};
                   callParams.logURI = logURI;
                var theName = "doesAuditLogExist";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Audit.getChildren = function(prefix, callback) {
                var callParams = {};
                   callParams.prefix = prefix;
                var theName = "getChildren";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteAuditLog

exports.Audit.deleteAuditLog = function(logURI, callback) {
                var callParams = {};
                   callParams.logURI = logURI;
                var theName = "deleteAuditLog";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAuditLog

exports.Audit.getAuditLog = function(logURI, callback) {
                var callParams = {};
                   callParams.logURI = logURI;
                var theName = "getAuditLog";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for writeAuditEntry

exports.Audit.writeAuditEntry = function(logURI, category, level, message, callback) {
                var callParams = {};
                   callParams.logURI = logURI;
                   callParams.category = category;
                   callParams.level = level;
                   callParams.message = message;
                var theName = "writeAuditEntry";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for writeAuditEntryData

exports.Audit.writeAuditEntryData = function(logURI, category, level, message, data, callback) {
                var callParams = {};
                   callParams.logURI = logURI;
                   callParams.category = category;
                   callParams.level = level;
                   callParams.message = message;
                   callParams.data = data;
                var theName = "writeAuditEntryData";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRecentLogEntries

exports.Audit.getRecentLogEntries = function(logURI, count, callback) {
                var callParams = {};
                   callParams.logURI = logURI;
                   callParams.count = count;
                var theName = "getRecentLogEntries";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getEntriesSince

exports.Audit.getEntriesSince = function(logURI, when, callback) {
                var callParams = {};
                   callParams.logURI = logURI;
                   callParams.when = when;
                var theName = "getEntriesSince";
                _genCall("Audit", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for postMailboxMessage

exports.Mailbox.postMailboxMessage = function(mailboxURI, content, callback) {
                var callParams = {};
                   callParams.mailboxURI = mailboxURI;
                   callParams.content = content;
                var theName = "postMailboxMessage";
                _genCall("Mailbox", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for moveMailboxMessage

exports.Mailbox.moveMailboxMessage = function(mailboxMessageURI, newMailboxURI, callback) {
                var callParams = {};
                   callParams.mailboxMessageURI = mailboxMessageURI;
                   callParams.newMailboxURI = newMailboxURI;
                var theName = "moveMailboxMessage";
                _genCall("Mailbox", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setMailboxStorage

exports.Mailbox.setMailboxStorage = function(mailboxConfig, fountainConfig, callback) {
                var callParams = {};
                   callParams.mailboxConfig = mailboxConfig;
                   callParams.fountainConfig = fountainConfig;
                var theName = "setMailboxStorage";
                _genCall("Mailbox", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getMailboxMessages

exports.Mailbox.getMailboxMessages = function(mailboxURI, callback) {
                var callParams = {};
                   callParams.mailboxURI = mailboxURI;
                var theName = "getMailboxMessages";
                _genCall("Mailbox", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Fields.getChildren = function(authority, callback) {
                var callParams = {};
                   callParams.authority = authority;
                var theName = "getChildren";
                _genCall("Fields", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getField

exports.Fields.getField = function(fieldURI, callback) {
                var callParams = {};
                   callParams.fieldURI = fieldURI;
                var theName = "getField";
                _genCall("Fields", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putField

exports.Fields.putField = function(fieldURI, field, callback) {
                var callParams = {};
                   callParams.fieldURI = fieldURI;
                   callParams.field = field;
                var theName = "putField";
                _genCall("Fields", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesFieldExist

exports.Fields.doesFieldExist = function(fieldURI, callback) {
                var callParams = {};
                   callParams.fieldURI = fieldURI;
                var theName = "doesFieldExist";
                _genCall("Fields", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteField

exports.Fields.deleteField = function(fieldURI, callback) {
                var callParams = {};
                   callParams.fieldURI = fieldURI;
                var theName = "deleteField";
                _genCall("Fields", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getFieldsFromDocument

exports.Fields.getFieldsFromDocument = function(docURI, fields, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                   callParams.fields = fields;
                var theName = "getFieldsFromDocument";
                _genCall("Fields", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getFieldsFromContent

exports.Fields.getFieldsFromContent = function(docURI, content, fields, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                   callParams.content = content;
                   callParams.fields = fields;
                var theName = "getFieldsFromContent";
                _genCall("Fields", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createBlobStore

exports.Blob.createBlobStore = function(raptureURI, adapter, options, metaAdapter, metaOptions, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.adapter = adapter;
                   callParams.options = options;
                   callParams.metaAdapter = metaAdapter;
                   callParams.metaOptions = metaOptions;
                var theName = "createBlobStore";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createBlobRepo

exports.Blob.createBlobRepo = function(blobRepoURI, config, metaConfig, callback) {
                var callParams = {};
                   callParams.blobRepoURI = blobRepoURI;
                   callParams.config = config;
                   callParams.metaConfig = metaConfig;
                var theName = "createBlobRepo";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getBlobRepoConfig

exports.Blob.getBlobRepoConfig = function(blobRepoURI, callback) {
                var callParams = {};
                   callParams.blobRepoURI = blobRepoURI;
                var theName = "getBlobRepoConfig";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllBlobRepoConfigs

exports.Blob.getAllBlobRepoConfigs = function(callback) {
                var callParams = {};
                var theName = "getAllBlobRepoConfigs";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteBlobRepo

exports.Blob.deleteBlobRepo = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "deleteBlobRepo";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesBlobRepoExist

exports.Blob.doesBlobRepoExist = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "doesBlobRepoExist";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesBlobExist

exports.Blob.doesBlobExist = function(blobURI, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                var theName = "doesBlobExist";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createBlob

exports.Blob.createBlob = function(blobURI, contentType, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                   callParams.contentType = contentType;
                var theName = "createBlob";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for appendToBlob

exports.Blob.appendToBlob = function(blobURI, content, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                   callParams.content = content;
                var theName = "appendToBlob";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putBlob

exports.Blob.putBlob = function(blobURI, content, contentType, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                   callParams.content = content;
                   callParams.contentType = contentType;
                var theName = "putBlob";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getBlob

exports.Blob.getBlob = function(blobURI, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                var theName = "getBlob";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteBlob

exports.Blob.deleteBlob = function(blobURI, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                var theName = "deleteBlob";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getBlobSize

exports.Blob.getBlobSize = function(blobURI, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                var theName = "getBlobSize";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getMetaData

exports.Blob.getMetaData = function(blobURI, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                var theName = "getMetaData";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllChildrenMap

exports.Blob.getAllChildrenMap = function(blobURI, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                var theName = "getAllChildrenMap";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Blob.getChildren = function(blobURI, callback) {
                var callParams = {};
                   callParams.blobURI = blobURI;
                var theName = "getChildren";
                _genCall("Blob", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createSheetStore

exports.Sheet.createSheetStore = function(raptureURI, adapter, options, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.adapter = adapter;
                   callParams.options = options;
                var theName = "createSheetStore";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createSheetRepo

exports.Sheet.createSheetRepo = function(sheetURI, config, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.config = config;
                var theName = "createSheetRepo";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSheetRepoConfig

exports.Sheet.getSheetRepoConfig = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "getSheetRepoConfig";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllSheetRepoConfigs

exports.Sheet.getAllSheetRepoConfigs = function(callback) {
                var callParams = {};
                var theName = "getAllSheetRepoConfigs";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createSheet

exports.Sheet.createSheet = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "createSheet";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteSheet

exports.Sheet.deleteSheet = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "deleteSheet";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesSheetExist

exports.Sheet.doesSheetExist = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "doesSheetExist";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteSheetRepo

exports.Sheet.deleteSheetRepo = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "deleteSheetRepo";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesSheetRepoExist

exports.Sheet.doesSheetRepoExist = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "doesSheetRepoExist";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllChildrenMap

exports.Sheet.getAllChildrenMap = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "getAllChildrenMap";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Sheet.getChildren = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "getChildren";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setSheetCell

exports.Sheet.setSheetCell = function(sheetURI, row, column, value, dimension, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.row = row;
                   callParams.column = column;
                   callParams.value = value;
                   callParams.dimension = dimension;
                var theName = "setSheetCell";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setBulkSheetCell

exports.Sheet.setBulkSheetCell = function(sheetURI, startRow, startColumn, values, dimension, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.startRow = startRow;
                   callParams.startColumn = startColumn;
                   callParams.values = values;
                   callParams.dimension = dimension;
                var theName = "setBulkSheetCell";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setBlock

exports.Sheet.setBlock = function(sheetURI, startRow, startColumn, values, height, width, dimension, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.startRow = startRow;
                   callParams.startColumn = startColumn;
                   callParams.values = values;
                   callParams.height = height;
                   callParams.width = width;
                   callParams.dimension = dimension;
                var theName = "setBlock";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSheetCell

exports.Sheet.getSheetCell = function(sheetURI, row, column, dimension, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.row = row;
                   callParams.column = column;
                   callParams.dimension = dimension;
                var theName = "getSheetCell";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setNamedSheetCell

exports.Sheet.setNamedSheetCell = function(sheetURI, rangeName, value, dimension, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.rangeName = rangeName;
                   callParams.value = value;
                   callParams.dimension = dimension;
                var theName = "setNamedSheetCell";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getNamedSheetCell

exports.Sheet.getNamedSheetCell = function(sheetURI, rangeName, dimension, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.rangeName = rangeName;
                   callParams.dimension = dimension;
                var theName = "getNamedSheetCell";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllCells

exports.Sheet.getAllCells = function(sheetURI, dimension, epoch, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.dimension = dimension;
                   callParams.epoch = epoch;
                var theName = "getAllCells";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSheetAsDisplay

exports.Sheet.getSheetAsDisplay = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "getSheetAsDisplay";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for renderSheet

exports.Sheet.renderSheet = function(sheetURI, blobURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.blobURI = blobURI;
                var theName = "renderSheet";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllStyles

exports.Sheet.getAllStyles = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "getAllStyles";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeStyle

exports.Sheet.removeStyle = function(sheetURI, styleName, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.styleName = styleName;
                var theName = "removeStyle";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createStyle

exports.Sheet.createStyle = function(sheetURI, styleName, style, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.styleName = styleName;
                   callParams.style = style;
                var theName = "createStyle";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllScripts

exports.Sheet.getAllScripts = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "getAllScripts";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeScript

exports.Sheet.removeScript = function(sheetURI, scriptName, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.scriptName = scriptName;
                var theName = "removeScript";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createScript

exports.Sheet.createScript = function(sheetURI, scriptName, script, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.scriptName = scriptName;
                   callParams.script = script;
                var theName = "createScript";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runScriptOnSheet

exports.Sheet.runScriptOnSheet = function(sheetURI, scriptName, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.scriptName = scriptName;
                var theName = "runScriptOnSheet";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSheetScript

exports.Sheet.getSheetScript = function(sheetURI, scriptName, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.scriptName = scriptName;
                var theName = "getSheetScript";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for generateScriptToRecreateSheet

exports.Sheet.generateScriptToRecreateSheet = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "generateScriptToRecreateSheet";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllRanges

exports.Sheet.getAllRanges = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "getAllRanges";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeRange

exports.Sheet.removeRange = function(sheetURI, rangeName, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.rangeName = rangeName;
                var theName = "removeRange";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createRange

exports.Sheet.createRange = function(sheetURI, rangeName, range, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.rangeName = rangeName;
                   callParams.range = range;
                var theName = "createRange";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllNotes

exports.Sheet.getAllNotes = function(sheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                var theName = "getAllNotes";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeNote

exports.Sheet.removeNote = function(sheetURI, noteId, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.noteId = noteId;
                var theName = "removeNote";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createNote

exports.Sheet.createNote = function(sheetURI, note, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.note = note;
                var theName = "createNote";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for cloneSheet

exports.Sheet.cloneSheet = function(sheetURI, newSheetURI, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.newSheetURI = newSheetURI;
                var theName = "cloneSheet";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSheetRangeByName

exports.Sheet.getSheetRangeByName = function(sheetURI, rangeName, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.rangeName = rangeName;
                var theName = "getSheetRangeByName";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSheetRangeByCoords

exports.Sheet.getSheetRangeByCoords = function(sheetURI, startRow, startColumn, endRow, endColumn, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.startRow = startRow;
                   callParams.startColumn = startColumn;
                   callParams.endRow = endRow;
                   callParams.endColumn = endColumn;
                var theName = "getSheetRangeByCoords";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteColumn

exports.Sheet.deleteColumn = function(sheetURI, column, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.column = column;
                var theName = "deleteColumn";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteRow

exports.Sheet.deleteRow = function(sheetURI, row, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.row = row;
                var theName = "deleteRow";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteCell

exports.Sheet.deleteCell = function(sheetURI, row, column, dimension, callback) {
                var callParams = {};
                   callParams.sheetURI = sheetURI;
                   callParams.row = row;
                   callParams.column = column;
                   callParams.dimension = dimension;
                var theName = "deleteCell";
                _genCall("Sheet", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getInstalledFeatures

exports.Feature.getInstalledFeatures = function(callback) {
                var callParams = {};
                var theName = "getInstalledFeatures";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getFeature

exports.Feature.getFeature = function(featureURI, callback) {
                var callParams = {};
                   callParams.featureURI = featureURI;
                var theName = "getFeature";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getFeatureManifest

exports.Feature.getFeatureManifest = function(manifestURI, callback) {
                var callParams = {};
                   callParams.manifestURI = manifestURI;
                var theName = "getFeatureManifest";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for recordFeature

exports.Feature.recordFeature = function(feature, callback) {
                var callParams = {};
                   callParams.feature = feature;
                var theName = "recordFeature";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesFeatureNeedToBeInstalled

exports.Feature.doesFeatureNeedToBeInstalled = function(feature, callback) {
                var callParams = {};
                   callParams.feature = feature;
                var theName = "doesFeatureNeedToBeInstalled";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for installFeature

exports.Feature.installFeature = function(manifest, payload, callback) {
                var callParams = {};
                   callParams.manifest = manifest;
                   callParams.payload = payload;
                var theName = "installFeature";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for installFeatureItem

exports.Feature.installFeatureItem = function(featureName, item, callback) {
                var callParams = {};
                   callParams.featureName = featureName;
                   callParams.item = item;
                var theName = "installFeatureItem";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for uninstallFeatureItem

exports.Feature.uninstallFeatureItem = function(item, callback) {
                var callParams = {};
                   callParams.item = item;
                var theName = "uninstallFeatureItem";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for uninstallFeature

exports.Feature.uninstallFeature = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "uninstallFeature";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for unrecordFeature

exports.Feature.unrecordFeature = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "unrecordFeature";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeFeatureManifest

exports.Feature.removeFeatureManifest = function(manifestURI, callback) {
                var callParams = {};
                   callParams.manifestURI = manifestURI;
                var theName = "removeFeatureManifest";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for downloadURI

exports.Feature.downloadURI = function(uri, callback) {
                var callParams = {};
                   callParams.uri = uri;
                var theName = "downloadURI";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for verify

exports.Feature.verify = function(feature, callback) {
                var callParams = {};
                   callParams.feature = feature;
                var theName = "verify";
                _genCall("Feature", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeServerCategory

exports.Pipeline.removeServerCategory = function(category, callback) {
                var callParams = {};
                   callParams.category = category;
                var theName = "removeServerCategory";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getServerCategories

exports.Pipeline.getServerCategories = function(callback) {
                var callParams = {};
                var theName = "getServerCategories";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getBoundExchanges

exports.Pipeline.getBoundExchanges = function(category, callback) {
                var callParams = {};
                   callParams.category = category;
                var theName = "getBoundExchanges";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deregisterPipelineExchange

exports.Pipeline.deregisterPipelineExchange = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "deregisterPipelineExchange";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getExchanges

exports.Pipeline.getExchanges = function(callback) {
                var callParams = {};
                var theName = "getExchanges";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getExchange

exports.Pipeline.getExchange = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "getExchange";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for publishMessageToCategory

exports.Pipeline.publishMessageToCategory = function(task, callback) {
                var callParams = {};
                   callParams.task = task;
                var theName = "publishMessageToCategory";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for broadcastMessageToCategory

exports.Pipeline.broadcastMessageToCategory = function(task, callback) {
                var callParams = {};
                   callParams.task = task;
                var theName = "broadcastMessageToCategory";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for broadcastMessageToAll

exports.Pipeline.broadcastMessageToAll = function(task, callback) {
                var callParams = {};
                   callParams.task = task;
                var theName = "broadcastMessageToAll";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getStatus

exports.Pipeline.getStatus = function(taskId, callback) {
                var callParams = {};
                   callParams.taskId = taskId;
                var theName = "getStatus";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for queryTasks

exports.Pipeline.queryTasks = function(query, callback) {
                var callParams = {};
                   callParams.query = query;
                var theName = "queryTasks";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getLatestTaskEpoch

exports.Pipeline.getLatestTaskEpoch = function(callback) {
                var callParams = {};
                var theName = "getLatestTaskEpoch";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for drainPipeline

exports.Pipeline.drainPipeline = function(exchange, callback) {
                var callParams = {};
                   callParams.exchange = exchange;
                var theName = "drainPipeline";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for registerExchangeDomain

exports.Pipeline.registerExchangeDomain = function(domainURI, config, callback) {
                var callParams = {};
                   callParams.domainURI = domainURI;
                   callParams.config = config;
                var theName = "registerExchangeDomain";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deregisterExchangeDomain

exports.Pipeline.deregisterExchangeDomain = function(domainURI, callback) {
                var callParams = {};
                   callParams.domainURI = domainURI;
                var theName = "deregisterExchangeDomain";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getExchangeDomains

exports.Pipeline.getExchangeDomains = function(callback) {
                var callParams = {};
                var theName = "getExchangeDomains";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setupStandardCategory

exports.Pipeline.setupStandardCategory = function(category, callback) {
                var callParams = {};
                   callParams.category = category;
                var theName = "setupStandardCategory";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for makeRPC

exports.Pipeline.makeRPC = function(queueName, fnName, params, timeoutInSeconds, callback) {
                var callParams = {};
                   callParams.queueName = queueName;
                   callParams.fnName = fnName;
                   callParams.params = params;
                   callParams.timeoutInSeconds = timeoutInSeconds;
                var theName = "makeRPC";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createTopicExchange

exports.Pipeline.createTopicExchange = function(domain, exchange, callback) {
                var callParams = {};
                   callParams.domain = domain;
                   callParams.exchange = exchange;
                var theName = "createTopicExchange";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for publishTopicMessage

exports.Pipeline.publishTopicMessage = function(domain, exchange, topic, message, callback) {
                var callParams = {};
                   callParams.domain = domain;
                   callParams.exchange = exchange;
                   callParams.topic = topic;
                   callParams.message = message;
                var theName = "publishTopicMessage";
                _genCall("Pipeline", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for asyncReflexScript

exports.Async.asyncReflexScript = function(reflexScript, parameters, callback) {
                var callParams = {};
                   callParams.reflexScript = reflexScript;
                   callParams.parameters = parameters;
                var theName = "asyncReflexScript";
                _genCall("Async", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for asyncReflexReference

exports.Async.asyncReflexReference = function(scriptURI, parameters, callback) {
                var callParams = {};
                   callParams.scriptURI = scriptURI;
                   callParams.parameters = parameters;
                var theName = "asyncReflexReference";
                _genCall("Async", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for asyncStatus

exports.Async.asyncStatus = function(taskId, callback) {
                var callParams = {};
                   callParams.taskId = taskId;
                var theName = "asyncStatus";
                _genCall("Async", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setupDefaultWorkflows

exports.Async.setupDefaultWorkflows = function(force, callback) {
                var callParams = {};
                   callParams.force = force;
                var theName = "setupDefaultWorkflows";
                _genCall("Async", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for retrieveSystemConfig

exports.Sys.retrieveSystemConfig = function(area, path, callback) {
                var callParams = {};
                   callParams.area = area;
                   callParams.path = path;
                var theName = "retrieveSystemConfig";
                _genCall("Sys", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for writeSystemConfig

exports.Sys.writeSystemConfig = function(area, path, content, callback) {
                var callParams = {};
                   callParams.area = area;
                   callParams.path = path;
                   callParams.content = content;
                var theName = "writeSystemConfig";
                _genCall("Sys", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeSystemConfig

exports.Sys.removeSystemConfig = function(area, path, callback) {
                var callParams = {};
                   callParams.area = area;
                   callParams.path = path;
                var theName = "removeSystemConfig";
                _genCall("Sys", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSystemFolders

exports.Sys.getSystemFolders = function(area, path, callback) {
                var callParams = {};
                   callParams.area = area;
                   callParams.path = path;
                var theName = "getSystemFolders";
                _genCall("Sys", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createServerGroup

exports.Runner.createServerGroup = function(name, description, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.description = description;
                var theName = "createServerGroup";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteServerGroup

exports.Runner.deleteServerGroup = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "deleteServerGroup";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllServerGroups

exports.Runner.getAllServerGroups = function(callback) {
                var callParams = {};
                var theName = "getAllServerGroups";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllApplicationDefinitions

exports.Runner.getAllApplicationDefinitions = function(callback) {
                var callParams = {};
                var theName = "getAllApplicationDefinitions";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllLibraryDefinitions

exports.Runner.getAllLibraryDefinitions = function(callback) {
                var callParams = {};
                var theName = "getAllLibraryDefinitions";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllApplicationInstances

exports.Runner.getAllApplicationInstances = function(callback) {
                var callParams = {};
                var theName = "getAllApplicationInstances";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getServerGroup

exports.Runner.getServerGroup = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "getServerGroup";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addGroupInclusion

exports.Runner.addGroupInclusion = function(name, inclusion, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.inclusion = inclusion;
                var theName = "addGroupInclusion";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeGroupInclusion

exports.Runner.removeGroupInclusion = function(name, inclusion, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.inclusion = inclusion;
                var theName = "removeGroupInclusion";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addGroupExclusion

exports.Runner.addGroupExclusion = function(name, exclusion, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.exclusion = exclusion;
                var theName = "addGroupExclusion";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeGroupExclusion

exports.Runner.removeGroupExclusion = function(name, exclusion, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.exclusion = exclusion;
                var theName = "removeGroupExclusion";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeGroupEntry

exports.Runner.removeGroupEntry = function(name, entry, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.entry = entry;
                var theName = "removeGroupEntry";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createApplicationDefinition

exports.Runner.createApplicationDefinition = function(name, ver, description, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.ver = ver;
                   callParams.description = description;
                var theName = "createApplicationDefinition";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteApplicationDefinition

exports.Runner.deleteApplicationDefinition = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "deleteApplicationDefinition";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for updateApplicationVersion

exports.Runner.updateApplicationVersion = function(name, ver, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.ver = ver;
                var theName = "updateApplicationVersion";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createLibraryDefinition

exports.Runner.createLibraryDefinition = function(name, ver, description, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.ver = ver;
                   callParams.description = description;
                var theName = "createLibraryDefinition";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteLibraryDefinition

exports.Runner.deleteLibraryDefinition = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "deleteLibraryDefinition";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getLibraryDefinition

exports.Runner.getLibraryDefinition = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "getLibraryDefinition";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for updateLibraryVersion

exports.Runner.updateLibraryVersion = function(name, ver, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.ver = ver;
                var theName = "updateLibraryVersion";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addLibraryToGroup

exports.Runner.addLibraryToGroup = function(serverGroup, libraryName, callback) {
                var callParams = {};
                   callParams.serverGroup = serverGroup;
                   callParams.libraryName = libraryName;
                var theName = "addLibraryToGroup";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeLibraryFromGroup

exports.Runner.removeLibraryFromGroup = function(serverGroup, libraryName, callback) {
                var callParams = {};
                   callParams.serverGroup = serverGroup;
                   callParams.libraryName = libraryName;
                var theName = "removeLibraryFromGroup";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createApplicationInstance

exports.Runner.createApplicationInstance = function(name, description, serverGroup, appName, timeRange, retryCount, parameters, apiUser, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.description = description;
                   callParams.serverGroup = serverGroup;
                   callParams.appName = appName;
                   callParams.timeRange = timeRange;
                   callParams.retryCount = retryCount;
                   callParams.parameters = parameters;
                   callParams.apiUser = apiUser;
                var theName = "createApplicationInstance";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runApplication

exports.Runner.runApplication = function(appName, queueName, parameterInput, parameterOutput, callback) {
                var callParams = {};
                   callParams.appName = appName;
                   callParams.queueName = queueName;
                   callParams.parameterInput = parameterInput;
                   callParams.parameterOutput = parameterOutput;
                var theName = "runApplication";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for runCustomApplication

exports.Runner.runCustomApplication = function(appName, queueName, parameterInput, parameterOutput, customApplicationPath, callback) {
                var callParams = {};
                   callParams.appName = appName;
                   callParams.queueName = queueName;
                   callParams.parameterInput = parameterInput;
                   callParams.parameterOutput = parameterOutput;
                   callParams.customApplicationPath = customApplicationPath;
                var theName = "runCustomApplication";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getApplicationStatus

exports.Runner.getApplicationStatus = function(applicationStatusURI, callback) {
                var callParams = {};
                   callParams.applicationStatusURI = applicationStatusURI;
                var theName = "getApplicationStatus";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getApplicationStatuses

exports.Runner.getApplicationStatuses = function(date, callback) {
                var callParams = {};
                   callParams.date = date;
                var theName = "getApplicationStatuses";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getApplicationStatusDates

exports.Runner.getApplicationStatusDates = function(callback) {
                var callParams = {};
                var theName = "getApplicationStatusDates";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for archiveApplicationStatuses

exports.Runner.archiveApplicationStatuses = function(callback) {
                var callParams = {};
                var theName = "archiveApplicationStatuses";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for changeApplicationStatus

exports.Runner.changeApplicationStatus = function(applicationStatusURI, statusCode, message, callback) {
                var callParams = {};
                   callParams.applicationStatusURI = applicationStatusURI;
                   callParams.statusCode = statusCode;
                   callParams.message = message;
                var theName = "changeApplicationStatus";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for recordStatusMessages

exports.Runner.recordStatusMessages = function(applicationStatusURI, messages, callback) {
                var callParams = {};
                   callParams.applicationStatusURI = applicationStatusURI;
                   callParams.messages = messages;
                var theName = "recordStatusMessages";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for terminateApplication

exports.Runner.terminateApplication = function(applicationStatusURI, reasonMessage, callback) {
                var callParams = {};
                   callParams.applicationStatusURI = applicationStatusURI;
                   callParams.reasonMessage = reasonMessage;
                var theName = "terminateApplication";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteApplicationInstance

exports.Runner.deleteApplicationInstance = function(name, serverGroup, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.serverGroup = serverGroup;
                var theName = "deleteApplicationInstance";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getApplicationInstance

exports.Runner.getApplicationInstance = function(name, serverGroup, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.serverGroup = serverGroup;
                var theName = "getApplicationInstance";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for updateStatus

exports.Runner.updateStatus = function(name, serverGroup, myServer, status, finished, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.serverGroup = serverGroup;
                   callParams.myServer = myServer;
                   callParams.status = status;
                   callParams.finished = finished;
                var theName = "updateStatus";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getApplicationsForServerGroup

exports.Runner.getApplicationsForServerGroup = function(serverGroup, callback) {
                var callParams = {};
                   callParams.serverGroup = serverGroup;
                var theName = "getApplicationsForServerGroup";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getApplicationsForServer

exports.Runner.getApplicationsForServer = function(serverName, callback) {
                var callParams = {};
                   callParams.serverName = serverName;
                var theName = "getApplicationsForServer";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getApplicationDefinition

exports.Runner.getApplicationDefinition = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "getApplicationDefinition";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setRunnerConfig

exports.Runner.setRunnerConfig = function(name, value, callback) {
                var callParams = {};
                   callParams.name = name;
                   callParams.value = value;
                var theName = "setRunnerConfig";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteRunnerConfig

exports.Runner.deleteRunnerConfig = function(name, callback) {
                var callParams = {};
                   callParams.name = name;
                var theName = "deleteRunnerConfig";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRunnerConfig

exports.Runner.getRunnerConfig = function(callback) {
                var callParams = {};
                var theName = "getRunnerConfig";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for recordRunnerStatus

exports.Runner.recordRunnerStatus = function(serverName, serverGroup, appInstance, appName, status, callback) {
                var callParams = {};
                   callParams.serverName = serverName;
                   callParams.serverGroup = serverGroup;
                   callParams.appInstance = appInstance;
                   callParams.appName = appName;
                   callParams.status = status;
                var theName = "recordRunnerStatus";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for recordInstanceCapabilities

exports.Runner.recordInstanceCapabilities = function(serverName, instanceName, capabilities, callback) {
                var callParams = {};
                   callParams.serverName = serverName;
                   callParams.instanceName = instanceName;
                   callParams.capabilities = capabilities;
                var theName = "recordInstanceCapabilities";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getCapabilities

exports.Runner.getCapabilities = function(serverName, instanceNames, callback) {
                var callParams = {};
                   callParams.serverName = serverName;
                   callParams.instanceNames = instanceNames;
                var theName = "getCapabilities";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRunnerServers

exports.Runner.getRunnerServers = function(callback) {
                var callParams = {};
                var theName = "getRunnerServers";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRunnerStatus

exports.Runner.getRunnerStatus = function(serverName, callback) {
                var callParams = {};
                   callParams.serverName = serverName;
                var theName = "getRunnerStatus";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for cleanRunnerStatus

exports.Runner.cleanRunnerStatus = function(ageInMinutes, callback) {
                var callParams = {};
                   callParams.ageInMinutes = ageInMinutes;
                var theName = "cleanRunnerStatus";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for markForRestart

exports.Runner.markForRestart = function(serverName, name, callback) {
                var callParams = {};
                   callParams.serverName = serverName;
                   callParams.name = name;
                var theName = "markForRestart";
                _genCall("Runner", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createSeriesStore

exports.Series.createSeriesStore = function(raptureURI, adapter, options, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.adapter = adapter;
                   callParams.options = options;
                var theName = "createSeriesStore";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createSeriesRepo

exports.Series.createSeriesRepo = function(seriesURI, config, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.config = config;
                var theName = "createSeriesRepo";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createSeries

exports.Series.createSeries = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "createSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for validateSeriesRepo

exports.Series.validateSeriesRepo = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "validateSeriesRepo";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesSeriesRepoExist

exports.Series.doesSeriesRepoExist = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "doesSeriesRepoExist";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesSeriesExist

exports.Series.doesSeriesExist = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "doesSeriesExist";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getSeriesRepoConfig

exports.Series.getSeriesRepoConfig = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "getSeriesRepoConfig";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllSeriesRepoConfigs

exports.Series.getAllSeriesRepoConfigs = function(callback) {
                var callParams = {};
                var theName = "getAllSeriesRepoConfigs";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteSeriesRepo

exports.Series.deleteSeriesRepo = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "deleteSeriesRepo";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteSeries

exports.Series.deleteSeries = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "deleteSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeFolder

exports.Series.removeFolder = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "removeFolder";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addDoubleToSeries

exports.Series.addDoubleToSeries = function(seriesURI, columnKey, columnValue, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.columnKey = columnKey;
                   callParams.columnValue = columnValue;
                var theName = "addDoubleToSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addLongToSeries

exports.Series.addLongToSeries = function(seriesURI, columnKey, columnValue, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.columnKey = columnKey;
                   callParams.columnValue = columnValue;
                var theName = "addLongToSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addStringToSeries

exports.Series.addStringToSeries = function(seriesURI, columnKey, columnValue, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.columnKey = columnKey;
                   callParams.columnValue = columnValue;
                var theName = "addStringToSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addStructureToSeries

exports.Series.addStructureToSeries = function(seriesURI, columnKey, jsonColumnValue, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.columnKey = columnKey;
                   callParams.jsonColumnValue = jsonColumnValue;
                var theName = "addStructureToSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addDoublesToSeries

exports.Series.addDoublesToSeries = function(seriesURI, columns, values, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.columns = columns;
                   callParams.values = values;
                var theName = "addDoublesToSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addLongsToSeries

exports.Series.addLongsToSeries = function(seriesURI, columns, values, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.columns = columns;
                   callParams.values = values;
                var theName = "addLongsToSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addStringsToSeries

exports.Series.addStringsToSeries = function(seriesURI, columns, values, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.columns = columns;
                   callParams.values = values;
                var theName = "addStringsToSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addStructuresToSeries

exports.Series.addStructuresToSeries = function(seriesURI, columns, jsonValues, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.columns = columns;
                   callParams.jsonValues = jsonValues;
                var theName = "addStructuresToSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for dropPointsFromSeries

exports.Series.dropPointsFromSeries = function(seriesURI, columns, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.columns = columns;
                var theName = "dropPointsFromSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for dropAllPointsFromSeries

exports.Series.dropAllPointsFromSeries = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "dropAllPointsFromSeries";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getLastPoint

exports.Series.getLastPoint = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "getLastPoint";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllPoints

exports.Series.getAllPoints = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "getAllPoints";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getPoints

exports.Series.getPoints = function(seriesURI, startColumn, maxNumber, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.maxNumber = maxNumber;
                var theName = "getPoints";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getPointsReverse

exports.Series.getPointsReverse = function(seriesURI, startColumn, maxNumber, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.maxNumber = maxNumber;
                var theName = "getPointsReverse";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRange

exports.Series.getRange = function(seriesURI, startColumn, endColumn, maxNumber, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.endColumn = endColumn;
                   callParams.maxNumber = maxNumber;
                var theName = "getRange";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllFromRange

exports.Series.getAllFromRange = function(seriesURI, startColumn, endColumn, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.endColumn = endColumn;
                var theName = "getAllFromRange";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllPointsAsDoubles

exports.Series.getAllPointsAsDoubles = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "getAllPointsAsDoubles";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getPointsAsDoubles

exports.Series.getPointsAsDoubles = function(seriesURI, startColumn, maxNumber, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.maxNumber = maxNumber;
                var theName = "getPointsAsDoubles";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRangeAsDoubles

exports.Series.getRangeAsDoubles = function(seriesURI, startColumn, endColumn, maxNumber, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.endColumn = endColumn;
                   callParams.maxNumber = maxNumber;
                var theName = "getRangeAsDoubles";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllFromRangeAsDoubles

exports.Series.getAllFromRangeAsDoubles = function(seriesURI, startColumn, endColumn, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.endColumn = endColumn;
                var theName = "getAllFromRangeAsDoubles";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllPointsAsStrings

exports.Series.getAllPointsAsStrings = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "getAllPointsAsStrings";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getPointsAsStrings

exports.Series.getPointsAsStrings = function(seriesURI, startColumn, maxNumber, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.maxNumber = maxNumber;
                var theName = "getPointsAsStrings";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRangeAsStrings

exports.Series.getRangeAsStrings = function(seriesURI, startColumn, endColumn, maxNumber, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.endColumn = endColumn;
                   callParams.maxNumber = maxNumber;
                var theName = "getRangeAsStrings";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllFromRangeAsStrings

exports.Series.getAllFromRangeAsStrings = function(seriesURI, startColumn, endColumn, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                   callParams.startColumn = startColumn;
                   callParams.endColumn = endColumn;
                var theName = "getAllFromRangeAsStrings";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for executeSeriesProgram

exports.Series.executeSeriesProgram = function(program, args, callback) {
                var callParams = {};
                   callParams.program = program;
                   callParams.args = args;
                var theName = "executeSeriesProgram";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for executeSeriesProgramQuietly

exports.Series.executeSeriesProgramQuietly = function(program, args, callback) {
                var callParams = {};
                   callParams.program = program;
                   callParams.args = args;
                var theName = "executeSeriesProgramQuietly";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Series.getChildren = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "getChildren";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllChildrenMap

exports.Series.getAllChildrenMap = function(seriesURI, callback) {
                var callParams = {};
                   callParams.seriesURI = seriesURI;
                var theName = "getAllChildrenMap";
                _genCall("Series", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllWorkflows

exports.Decision.getAllWorkflows = function(callback) {
                var callParams = {};
                var theName = "getAllWorkflows";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorkflowChildren

exports.Decision.getWorkflowChildren = function(workflowURI, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                var theName = "getWorkflowChildren";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorkOrderChildren

exports.Decision.getWorkOrderChildren = function(parentPath, callback) {
                var callParams = {};
                   callParams.parentPath = parentPath;
                var theName = "getWorkOrderChildren";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putWorkflow

exports.Decision.putWorkflow = function(workflow, callback) {
                var callParams = {};
                   callParams.workflow = workflow;
                var theName = "putWorkflow";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorkflow

exports.Decision.getWorkflow = function(workflowURI, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                var theName = "getWorkflow";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorkflowStep

exports.Decision.getWorkflowStep = function(stepURI, callback) {
                var callParams = {};
                   callParams.stepURI = stepURI;
                var theName = "getWorkflowStep";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getStepCategory

exports.Decision.getStepCategory = function(stepURI, callback) {
                var callParams = {};
                   callParams.stepURI = stepURI;
                var theName = "getStepCategory";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addStep

exports.Decision.addStep = function(workflowURI, step, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                   callParams.step = step;
                var theName = "addStep";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeStep

exports.Decision.removeStep = function(workflowURI, stepName, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                   callParams.stepName = stepName;
                var theName = "removeStep";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addTransition

exports.Decision.addTransition = function(workflowURI, stepName, transition, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                   callParams.stepName = stepName;
                   callParams.transition = transition;
                var theName = "addTransition";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeTransition

exports.Decision.removeTransition = function(workflowURI, stepName, transitionName, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                   callParams.stepName = stepName;
                   callParams.transitionName = transitionName;
                var theName = "removeTransition";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteWorkflow

exports.Decision.deleteWorkflow = function(workflowURI, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                var theName = "deleteWorkflow";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createWorkOrder

exports.Decision.createWorkOrder = function(workflowURI, argsMap, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                   callParams.argsMap = argsMap;
                var theName = "createWorkOrder";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createWorkOrderP

exports.Decision.createWorkOrderP = function(workflowURI, argsMap, appStatusUriPattern, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                   callParams.argsMap = argsMap;
                   callParams.appStatusUriPattern = appStatusUriPattern;
                var theName = "createWorkOrderP";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for releaseWorkOrderLock

exports.Decision.releaseWorkOrderLock = function(workOrderURI, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                var theName = "releaseWorkOrderLock";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorkOrderStatus

exports.Decision.getWorkOrderStatus = function(workOrderURI, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                var theName = "getWorkOrderStatus";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for writeWorkflowAuditEntry

exports.Decision.writeWorkflowAuditEntry = function(workOrderURI, message, error, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                   callParams.message = message;
                   callParams.error = error;
                var theName = "writeWorkflowAuditEntry";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorkOrdersByDay

exports.Decision.getWorkOrdersByDay = function(startTimeInstant, callback) {
                var callParams = {};
                   callParams.startTimeInstant = startTimeInstant;
                var theName = "getWorkOrdersByDay";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorkOrder

exports.Decision.getWorkOrder = function(workOrderURI, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                var theName = "getWorkOrder";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorker

exports.Decision.getWorker = function(workOrderURI, workerId, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                   callParams.workerId = workerId;
                var theName = "getWorker";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for cancelWorkOrder

exports.Decision.cancelWorkOrder = function(workOrderURI, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                var theName = "cancelWorkOrder";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for resumeWorkOrder

exports.Decision.resumeWorkOrder = function(workOrderURI, resumeStepURI, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                   callParams.resumeStepURI = resumeStepURI;
                var theName = "resumeWorkOrder";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for wasCancelCalled

exports.Decision.wasCancelCalled = function(workOrderURI, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                var theName = "wasCancelCalled";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getCancellationDetails

exports.Decision.getCancellationDetails = function(workOrderURI, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                var theName = "getCancellationDetails";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getWorkOrderDebug

exports.Decision.getWorkOrderDebug = function(workOrderURI, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                var theName = "getWorkOrderDebug";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setWorkOrderFountainConfig

exports.Decision.setWorkOrderFountainConfig = function(config, force, callback) {
                var callParams = {};
                   callParams.config = config;
                   callParams.force = force;
                var theName = "setWorkOrderFountainConfig";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setContextLiteral

exports.Decision.setContextLiteral = function(workerURI, varAlias, literalValue, callback) {
                var callParams = {};
                   callParams.workerURI = workerURI;
                   callParams.varAlias = varAlias;
                   callParams.literalValue = literalValue;
                var theName = "setContextLiteral";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setContextLink

exports.Decision.setContextLink = function(workerURI, varAlias, expressionValue, callback) {
                var callParams = {};
                   callParams.workerURI = workerURI;
                   callParams.varAlias = varAlias;
                   callParams.expressionValue = expressionValue;
                var theName = "setContextLink";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getContextValue

exports.Decision.getContextValue = function(workerURI, varAlias, callback) {
                var callParams = {};
                   callParams.workerURI = workerURI;
                   callParams.varAlias = varAlias;
                var theName = "getContextValue";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addErrorToContext

exports.Decision.addErrorToContext = function(workerURI, errorWrapper, callback) {
                var callParams = {};
                   callParams.workerURI = workerURI;
                   callParams.errorWrapper = errorWrapper;
                var theName = "addErrorToContext";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getErrorsFromContext

exports.Decision.getErrorsFromContext = function(workerURI, callback) {
                var callParams = {};
                   callParams.workerURI = workerURI;
                var theName = "getErrorsFromContext";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getExceptionInfo

exports.Decision.getExceptionInfo = function(workOrderURI, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                var theName = "getExceptionInfo";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for reportStepProgress

exports.Decision.reportStepProgress = function(workerURI, stepStartTime, message, progress, max, callback) {
                var callParams = {};
                   callParams.workerURI = workerURI;
                   callParams.stepStartTime = stepStartTime;
                   callParams.message = message;
                   callParams.progress = progress;
                   callParams.max = max;
                var theName = "reportStepProgress";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAppStatuses

exports.Decision.getAppStatuses = function(prefix, callback) {
                var callParams = {};
                   callParams.prefix = prefix;
                var theName = "getAppStatuses";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAppStatusDetails

exports.Decision.getAppStatusDetails = function(prefix, extraContextValues, callback) {
                var callParams = {};
                   callParams.prefix = prefix;
                   callParams.extraContextValues = extraContextValues;
                var theName = "getAppStatusDetails";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getMonthlyMetrics

exports.Decision.getMonthlyMetrics = function(workflowURI, jobURI, argsHashValue, state, callback) {
                var callParams = {};
                   callParams.workflowURI = workflowURI;
                   callParams.jobURI = jobURI;
                   callParams.argsHashValue = argsHashValue;
                   callParams.state = state;
                var theName = "getMonthlyMetrics";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for queryLogs

exports.Decision.queryLogs = function(workOrderURI, startTime, endTime, keepAlive, bufferSize, nextBatchId, stepName, stepStartTime, callback) {
                var callParams = {};
                   callParams.workOrderURI = workOrderURI;
                   callParams.startTime = startTime;
                   callParams.endTime = endTime;
                   callParams.keepAlive = keepAlive;
                   callParams.bufferSize = bufferSize;
                   callParams.nextBatchId = nextBatchId;
                   callParams.stepName = stepName;
                   callParams.stepStartTime = stepStartTime;
                var theName = "queryLogs";
                _genCall("Decision", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getContent

exports.Repo.getContent = function(raptureURI, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                var theName = "getContent";
                _genCall("Repo", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putContent

exports.Repo.putContent = function(raptureURI, content, comment, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.content = content;
                   callParams.comment = comment;
                var theName = "putContent";
                _genCall("Repo", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteContent

exports.Repo.deleteContent = function(raptureURI, comment, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.comment = comment;
                var theName = "deleteContent";
                _genCall("Repo", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createDocumentStore

exports.Doc.createDocumentStore = function(raptureURI, adapter, options, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.adapter = adapter;
                   callParams.options = options;
                var theName = "createDocumentStore";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for validate

exports.Doc.validate = function(raptureURI, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                var theName = "validate";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createDocumentRepo

exports.Doc.createDocumentRepo = function(raptureURI, config, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                   callParams.config = config;
                var theName = "createDocumentRepo";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createDocument

exports.Doc.createDocument = function(documentURI, callback) {
                var callParams = {};
                   callParams.documentURI = documentURI;
                var theName = "createDocument";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesDocumentRepoExist

exports.Doc.doesDocumentRepoExist = function(raptureURI, callback) {
                var callParams = {};
                   callParams.raptureURI = raptureURI;
                var theName = "doesDocumentRepoExist";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesDocumentExist

exports.Doc.doesDocumentExist = function(documentURI, callback) {
                var callParams = {};
                   callParams.documentURI = documentURI;
                var theName = "doesDocumentExist";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getDocumentRepoConfig

exports.Doc.getDocumentRepoConfig = function(docRepoURI, callback) {
                var callParams = {};
                   callParams.docRepoURI = docRepoURI;
                var theName = "getDocumentRepoConfig";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getDocumentRepoStatus

exports.Doc.getDocumentRepoStatus = function(docRepoURI, callback) {
                var callParams = {};
                   callParams.docRepoURI = docRepoURI;
                var theName = "getDocumentRepoStatus";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllDocumentRepoConfigs

exports.Doc.getAllDocumentRepoConfigs = function(callback) {
                var callParams = {};
                var theName = "getAllDocumentRepoConfigs";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteDocumentRepo

exports.Doc.deleteDocumentRepo = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "deleteDocumentRepo";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for archiveVersions

exports.Doc.archiveVersions = function(repoURI, versionLimit, timeLimit, ensureVersionLimit, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                   callParams.versionLimit = versionLimit;
                   callParams.timeLimit = timeLimit;
                   callParams.ensureVersionLimit = ensureVersionLimit;
                var theName = "archiveVersions";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getMetaContent

exports.Doc.getMetaContent = function(docURI, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                var theName = "getMetaContent";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getMetaData

exports.Doc.getMetaData = function(docURI, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                var theName = "getMetaData";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for revertDocument

exports.Doc.revertDocument = function(docURI, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                var theName = "revertDocument";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getContent

exports.Doc.getContent = function(docURI, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                var theName = "getContent";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putContent

exports.Doc.putContent = function(docURI, content, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                   callParams.content = content;
                var theName = "putContent";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putContentWithVersion

exports.Doc.putContentWithVersion = function(docURI, content, currentVersion, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                   callParams.content = content;
                   callParams.currentVersion = currentVersion;
                var theName = "putContentWithVersion";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putContentWithEventContext

exports.Doc.putContentWithEventContext = function(docURI, content, eventContext, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                   callParams.content = content;
                   callParams.eventContext = eventContext;
                var theName = "putContentWithEventContext";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteContent

exports.Doc.deleteContent = function(docURI, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                var theName = "deleteContent";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for renameContent

exports.Doc.renameContent = function(fromDocURI, toDocURI, callback) {
                var callParams = {};
                   callParams.fromDocURI = fromDocURI;
                   callParams.toDocURI = toDocURI;
                var theName = "renameContent";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for batchGet

exports.Doc.batchGet = function(docURIs, callback) {
                var callParams = {};
                   callParams.docURIs = docURIs;
                var theName = "batchGet";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for batchGetMetaContent

exports.Doc.batchGetMetaContent = function(docURIs, callback) {
                var callParams = {};
                   callParams.docURIs = docURIs;
                var theName = "batchGetMetaContent";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for batchExists

exports.Doc.batchExists = function(docURIs, callback) {
                var callParams = {};
                   callParams.docURIs = docURIs;
                var theName = "batchExists";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for batchPutContent

exports.Doc.batchPutContent = function(docURIs, contents, callback) {
                var callParams = {};
                   callParams.docURIs = docURIs;
                   callParams.contents = contents;
                var theName = "batchPutContent";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for batchRenameContent

exports.Doc.batchRenameContent = function(authority, comment, fromDocURIs, toDocURIs, callback) {
                var callParams = {};
                   callParams.authority = authority;
                   callParams.comment = comment;
                   callParams.fromDocURIs = fromDocURIs;
                   callParams.toDocURIs = toDocURIs;
                var theName = "batchRenameContent";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for folderQuery

exports.Doc.folderQuery = function(docURI, depth, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                   callParams.depth = depth;
                var theName = "folderQuery";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for uptoFolderQuery

exports.Doc.uptoFolderQuery = function(docURI, depth, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                   callParams.depth = depth;
                var theName = "uptoFolderQuery";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeFolder

exports.Doc.removeFolder = function(docURI, force, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                   callParams.force = force;
                var theName = "removeFolder";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Doc.getChildren = function(docURI, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                var theName = "getChildren";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllChildrenMap

exports.Doc.getAllChildrenMap = function(docURI, callback) {
                var callParams = {};
                   callParams.docURI = docURI;
                var theName = "getAllChildrenMap";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addDocumentAttribute

exports.Doc.addDocumentAttribute = function(attributeURI, value, callback) {
                var callParams = {};
                   callParams.attributeURI = attributeURI;
                   callParams.value = value;
                var theName = "addDocumentAttribute";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addDocumentAttributes

exports.Doc.addDocumentAttributes = function(attributeURI, keys, values, callback) {
                var callParams = {};
                   callParams.attributeURI = attributeURI;
                   callParams.keys = keys;
                   callParams.values = values;
                var theName = "addDocumentAttributes";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getDocumentAttribute

exports.Doc.getDocumentAttribute = function(attributeURI, callback) {
                var callParams = {};
                   callParams.attributeURI = attributeURI;
                var theName = "getDocumentAttribute";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getDocumentAttributes

exports.Doc.getDocumentAttributes = function(attributeURI, callback) {
                var callParams = {};
                   callParams.attributeURI = attributeURI;
                var theName = "getDocumentAttributes";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeDocumentAttribute

exports.Doc.removeDocumentAttribute = function(attributeURI, callback) {
                var callParams = {};
                   callParams.attributeURI = attributeURI;
                var theName = "removeDocumentAttribute";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getFountainURI

exports.Doc.getFountainURI = function(documentRepoURI, callback) {
                var callParams = {};
                   callParams.documentRepoURI = documentRepoURI;
                var theName = "getFountainURI";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for attachFountainToDocumentRepo

exports.Doc.attachFountainToDocumentRepo = function(documentRepoURI, fountainConfig, callback) {
                var callParams = {};
                   callParams.documentRepoURI = documentRepoURI;
                   callParams.fountainConfig = fountainConfig;
                var theName = "attachFountainToDocumentRepo";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAttachedFountain

exports.Doc.getAttachedFountain = function(documentRepoURI, callback) {
                var callParams = {};
                   callParams.documentRepoURI = documentRepoURI;
                var theName = "getAttachedFountain";
                _genCall("Doc", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createRelationshipRepo

exports.Relationship.createRelationshipRepo = function(relationshipRepoURI, config, callback) {
                var callParams = {};
                   callParams.relationshipRepoURI = relationshipRepoURI;
                   callParams.config = config;
                var theName = "createRelationshipRepo";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRelationshipRepoConfig

exports.Relationship.getRelationshipRepoConfig = function(blobRepoURI, callback) {
                var callParams = {};
                   callParams.blobRepoURI = blobRepoURI;
                var theName = "getRelationshipRepoConfig";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllRelationshipRepoConfigs

exports.Relationship.getAllRelationshipRepoConfigs = function(callback) {
                var callParams = {};
                var theName = "getAllRelationshipRepoConfigs";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteRelationshipRepo

exports.Relationship.deleteRelationshipRepo = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "deleteRelationshipRepo";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesRelationshipRepoExist

exports.Relationship.doesRelationshipRepoExist = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "doesRelationshipRepoExist";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesRelationshipExist

exports.Relationship.doesRelationshipExist = function(relationshipURI, callback) {
                var callParams = {};
                   callParams.relationshipURI = relationshipURI;
                var theName = "doesRelationshipExist";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createRelationship

exports.Relationship.createRelationship = function(relationshipAuthorityURI, fromURI, toURI, label, properties, callback) {
                var callParams = {};
                   callParams.relationshipAuthorityURI = relationshipAuthorityURI;
                   callParams.fromURI = fromURI;
                   callParams.toURI = toURI;
                   callParams.label = label;
                   callParams.properties = properties;
                var theName = "createRelationship";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRelationship

exports.Relationship.getRelationship = function(relationshipURI, callback) {
                var callParams = {};
                   callParams.relationshipURI = relationshipURI;
                var theName = "getRelationship";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for deleteRelationship

exports.Relationship.deleteRelationship = function(relationshipURI, callback) {
                var callParams = {};
                   callParams.relationshipURI = relationshipURI;
                var theName = "deleteRelationship";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getOutboundRelationships

exports.Relationship.getOutboundRelationships = function(relationshipRepoURI, fromURI, callback) {
                var callParams = {};
                   callParams.relationshipRepoURI = relationshipRepoURI;
                   callParams.fromURI = fromURI;
                var theName = "getOutboundRelationships";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getInboundRelationships

exports.Relationship.getInboundRelationships = function(relationshipRepoURI, toURI, callback) {
                var callParams = {};
                   callParams.relationshipRepoURI = relationshipRepoURI;
                   callParams.toURI = toURI;
                var theName = "getInboundRelationships";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getLabledRelationships

exports.Relationship.getLabledRelationships = function(relationshipRepoURI, relationshipLabel, callback) {
                var callParams = {};
                   callParams.relationshipRepoURI = relationshipRepoURI;
                   callParams.relationshipLabel = relationshipLabel;
                var theName = "getLabledRelationships";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getChildren

exports.Relationship.getChildren = function(prefix, callback) {
                var callParams = {};
                   callParams.prefix = prefix;
                var theName = "getChildren";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllChildrenMap

exports.Relationship.getAllChildrenMap = function(prefix, callback) {
                var callParams = {};
                   callParams.prefix = prefix;
                var theName = "getAllChildrenMap";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getRelationshipCenteredOn

exports.Relationship.getRelationshipCenteredOn = function(relationshipNodeURI, options, callback) {
                var callParams = {};
                   callParams.relationshipNodeURI = relationshipNodeURI;
                   callParams.options = options;
                var theName = "getRelationshipCenteredOn";
                _genCall("Relationship", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getStringStatMap

exports.Operations.getStringStatMap = function(callback) {
                var callParams = {};
                var theName = "getStringStatMap";
                _genCall("Operations", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getValueStatMap

exports.Operations.getValueStatMap = function(callback) {
                var callParams = {};
                var theName = "getValueStatMap";
                _genCall("Operations", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getNetworkInfo

exports.Environment.getNetworkInfo = function(callback) {
                var callParams = {};
                var theName = "getNetworkInfo";
                _genCall("Environment", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setNetworkInfo

exports.Environment.setNetworkInfo = function(network, callback) {
                var callParams = {};
                   callParams.network = network;
                var theName = "setNetworkInfo";
                _genCall("Environment", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getThisServer

exports.Environment.getThisServer = function(callback) {
                var callParams = {};
                var theName = "getThisServer";
                _genCall("Environment", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getServers

exports.Environment.getServers = function(callback) {
                var callParams = {};
                var theName = "getServers";
                _genCall("Environment", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setThisServer

exports.Environment.setThisServer = function(info, callback) {
                var callParams = {};
                   callParams.info = info;
                var theName = "setThisServer";
                _genCall("Environment", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for setApplianceMode

exports.Environment.setApplianceMode = function(mode, callback) {
                var callParams = {};
                   callParams.mode = mode;
                var theName = "setApplianceMode";
                _genCall("Environment", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getApplianceMode

exports.Environment.getApplianceMode = function(callback) {
                var callParams = {};
                var theName = "getApplianceMode";
                _genCall("Environment", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getServerStatus

exports.Environment.getServerStatus = function(callback) {
                var callParams = {};
                var theName = "getServerStatus";
                _genCall("Environment", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getLicenseInfo

exports.Environment.getLicenseInfo = function(callback) {
                var callParams = {};
                var theName = "getLicenseInfo";
                _genCall("Environment", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for putTemplate

exports.Question.putTemplate = function(qTemplateURI, template, callback) {
                var callParams = {};
                   callParams.qTemplateURI = qTemplateURI;
                   callParams.template = template;
                var theName = "putTemplate";
                _genCall("Question", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getTemplate

exports.Question.getTemplate = function(qTemplateURI, callback) {
                var callParams = {};
                   callParams.qTemplateURI = qTemplateURI;
                var theName = "getTemplate";
                _genCall("Question", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getQuestion

exports.Question.getQuestion = function(questionURI, callback) {
                var callParams = {};
                   callParams.questionURI = questionURI;
                var theName = "getQuestion";
                _genCall("Question", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for askQuestion

exports.Question.askQuestion = function(qTemplateURI, variables, callback, callback) {
                var callParams = {};
                   callParams.qTemplateURI = qTemplateURI;
                   callParams.variables = variables;
                   callParams.callback = callback;
                var theName = "askQuestion";
                _genCall("Question", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getQNotifications

exports.Question.getQNotifications = function(search, callback) {
                var callParams = {};
                   callParams.search = search;
                var theName = "getQNotifications";
                _genCall("Question", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getQNotificationURIs

exports.Question.getQNotificationURIs = function(search, callback) {
                var callParams = {};
                   callParams.search = search;
                var theName = "getQNotificationURIs";
                _genCall("Question", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for answerQuestion

exports.Question.answerQuestion = function(questionURI, response, data, callback) {
                var callParams = {};
                   callParams.questionURI = questionURI;
                   callParams.response = response;
                   callParams.data = data;
                var theName = "answerQuestion";
                _genCall("Question", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createStructuredRepo

exports.Structured.createStructuredRepo = function(repoURI, config, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                   callParams.config = config;
                var theName = "createStructuredRepo";
                _genCall("Structured", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for createStructuredStore

exports.Structured.createStructuredStore = function(repoURI, adapter, options, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                   callParams.adapter = adapter;
                   callParams.options = options;
                var theName = "createStructuredStore";
                _genCall("Structured", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for doesStructuredRepoExist

exports.Structured.doesStructuredRepoExist = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "doesStructuredRepoExist";
                _genCall("Structured", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for validateStructuredRepo

exports.Structured.validateStructuredRepo = function(repoURI, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                var theName = "validateStructuredRepo";
                _genCall("Structured", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for getAllStructuredRepoConfigs

exports.Structured.getAllStructuredRepoConfigs = function(callback) {
                var callParams = {};
                var theName = "getAllStructuredRepoConfigs";
                _genCall("Structured", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addTable

exports.Structured.addTable = function(repoURI, columns, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                   callParams.columns = columns;
                var theName = "addTable";
                _genCall("Structured", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for addColumns

exports.Structured.addColumns = function(repoURI, columns, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                   callParams.columns = columns;
                var theName = "addColumns";
                _genCall("Structured", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    },
    // Function for removeColumns

exports.Structured.removeColumns = function(repoURI, names, callback) {
                var callParams = {};
                   callParams.repoURI = repoURI;
                   callParams.names = names;
                var theName = "removeColumns";
                _genCall("Structured", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    }

