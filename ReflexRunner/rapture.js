//
// Copyright (C) 2011-2013 Incapture Technologies LLC
//
// This is an autogenerated license statement. When copyright notices appear below
// this one that copyright supercedes this statement.
//
// Unless required by applicable law or agreed to in writing, software is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.
//
// Unless explicit permission obtained in writing this software cannot be distributed.
//

// Autogenerated Javascript API for Rapture
//

(function($){

	$.fn.raptureSettings = [];
	var _aoSettings = $.fn.raptureSettings;

	$.fn.raptureExt = {};
	var _oExt = $.fn.raptureExt;

  function _genCall(prefix, fnname, params, callback) {
        params.context = _oExt.context;
          var realparams = JSON.stringify(params);
          $.post(_oExt.site + "/rapture/" + prefix.toLowerCase(), {
                  FUNCTION: fnname.toUpperCase(),
                  PARAMS: realparams
                },
                function(data) {
                     callback(data);
                },
                "json");
  };

	function _login(password, callback) {
		// We already have a session, now create and update the context for all
		// other calls
		// We pass in to validateUser the following
		// partition, user, hashPassword, session (session comes from the other
		// bit)
		// The hashPassword is MD5(MD5(password) + ":" + salty);
		var hashPassword = MD5(password);
		var combinedBit = hashPassword + ":" + _oExt.session.salt;
		var senderPassword = MD5(combinedBit);

		var sendParams = {
                       "user" : _oExt.username,
                       "digest" : senderPassword,
                       "context" : _oExt.session.contextId,
                       "clientApiVersion": {"major": 1, "minor": 2, "micro": 2 } };
		var parms = JSON.stringify(sendParams);

 		$.post(_oExt.site + "/rapture/login",
                   { FUNCTION: "LOGIN",
                     PARAMS: parms },
                    function(data) {
          	        _oExt.context = data.response;
          	        callback(true);
                    }, "json");
	};

    $.extend({
        rapture: {
		    login: function(site, username, password, callback) {
		        _oExt.username = username;
						_oExt.site = site;
		        var sessionParams = { "user" : username };
		        var parms = JSON.stringify(sessionParams);
		        // Obtain session
		        $.post(site + "/rapture/login", {
		            FUNCTION : "CONTEXT",
		            PARAMS : parms },
		            function(data) {
		            _oExt.session = data.response;
		            _login(password, callback);
		            }, "json");
		    },
        getClientApiVersion : function(callback) {
          callback( {
            response : {"major":1, "minor":2, "micro":2},
            inError : false,
            success : true
          } );
        },


        // Function for createActivity
        createActivity: function(description, message, progress, max, callback) {
                    var callParams = {};
                       callParams.description = description;
                       callParams.message = message;
                       callParams.progress = progress;
                       callParams.max = max;
                    var theName = "createActivity";
                    _genCall("Activity", theName, callParams, callback);
        },
        // Function for updateActivity
        updateActivity: function(activityId, message, progress, max, callback) {
                    var callParams = {};
                       callParams.activityId = activityId;
                       callParams.message = message;
                       callParams.progress = progress;
                       callParams.max = max;
                    var theName = "updateActivity";
                    _genCall("Activity", theName, callParams, callback);
        },
        // Function for finishActivity
        finishActivity: function(activityId, message, callback) {
                    var callParams = {};
                       callParams.activityId = activityId;
                       callParams.message = message;
                    var theName = "finishActivity";
                    _genCall("Activity", theName, callParams, callback);
        },
        // Function for requestAbortActivity
        requestAbortActivity: function(activityId, message, callback) {
                    var callParams = {};
                       callParams.activityId = activityId;
                       callParams.message = message;
                    var theName = "requestAbortActivity";
                    _genCall("Activity", theName, callParams, callback);
        },
        // Function for queryByExpiryTime
        queryByExpiryTime: function(nextBatchId, batchSize, lastSeen, callback) {
                    var callParams = {};
                       callParams.nextBatchId = nextBatchId;
                       callParams.batchSize = batchSize;
                       callParams.lastSeen = lastSeen;
                    var theName = "queryByExpiryTime";
                    _genCall("Activity", theName, callParams, callback);
        },
        // Function for getById
        getById: function(activityId, callback) {
                    var callParams = {};
                       callParams.activityId = activityId;
                    var theName = "getById";
                    _genCall("Activity", theName, callParams, callback);
        },
        // Function for setEmphemeralRepo
        setEmphemeralRepo: function(config, callback) {
                    var callParams = {};
                       callParams.config = config;
                    var theName = "setEmphemeralRepo";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for setConfigRepo
        setConfigRepo: function(config, callback) {
                    var callParams = {};
                       callParams.config = config;
                    var theName = "setConfigRepo";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for setSettingsRepo
        setSettingsRepo: function(config, callback) {
                    var callParams = {};
                       callParams.config = config;
                    var theName = "setSettingsRepo";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for migrateConfigRepo
        migrateConfigRepo: function(newConfig, callback) {
                    var callParams = {};
                       callParams.newConfig = newConfig;
                    var theName = "migrateConfigRepo";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for migrateEphemeralRepo
        migrateEphemeralRepo: function(newConfig, callback) {
                    var callParams = {};
                       callParams.newConfig = newConfig;
                    var theName = "migrateEphemeralRepo";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for migrateSettingsRepo
        migrateSettingsRepo: function(newConfig, callback) {
                    var callParams = {};
                       callParams.newConfig = newConfig;
                    var theName = "migrateSettingsRepo";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for getConfigRepo
        getConfigRepo: function(callback) {
                    var callParams = {};
                    var theName = "getConfigRepo";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for getSettingsRepo
        getSettingsRepo: function(callback) {
                    var callParams = {};
                    var theName = "getSettingsRepo";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for getEphemeralRepo
        getEphemeralRepo: function(callback) {
                    var callParams = {};
                    var theName = "getEphemeralRepo";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for restartBootstrap
        restartBootstrap: function(callback) {
                    var callParams = {};
                    var theName = "restartBootstrap";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for addScriptClass
        addScriptClass: function(keyword, className, callback) {
                    var callParams = {};
                       callParams.keyword = keyword;
                       callParams.className = className;
                    var theName = "addScriptClass";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for getScriptClasses
        getScriptClasses: function(callback) {
                    var callParams = {};
                    var theName = "getScriptClasses";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for deleteScriptClass
        deleteScriptClass: function(keyword, callback) {
                    var callParams = {};
                       callParams.keyword = keyword;
                    var theName = "deleteScriptClass";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for createScript
        createScript: function(scriptURI, language, purpose, script, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                       callParams.language = language;
                       callParams.purpose = purpose;
                       callParams.script = script;
                    var theName = "createScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for createScriptLink
        createScriptLink: function(fromScriptURI, toScriptURI, callback) {
                    var callParams = {};
                       callParams.fromScriptURI = fromScriptURI;
                       callParams.toScriptURI = toScriptURI;
                    var theName = "createScriptLink";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for removeScriptLink
        removeScriptLink: function(fromScriptURI, callback) {
                    var callParams = {};
                       callParams.fromScriptURI = fromScriptURI;
                    var theName = "removeScriptLink";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for setScriptParameters
        setScriptParameters: function(scriptURI, parameters, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                       callParams.parameters = parameters;
                    var theName = "setScriptParameters";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for doesScriptExist
        doesScriptExist: function(scriptURI, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                    var theName = "doesScriptExist";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for deleteScript
        deleteScript: function(scriptURI, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                    var theName = "deleteScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for getScriptNames
        getScriptNames: function(scriptURI, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                    var theName = "getScriptNames";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(scriptURI, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                    var theName = "getChildren";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for removeFolder
        removeFolder: function(scriptURI, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                    var theName = "removeFolder";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for getScript
        getScript: function(scriptURI, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                    var theName = "getScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for putScript
        putScript: function(scriptURI, script, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                       callParams.script = script;
                    var theName = "putScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for putRawScript
        putRawScript: function(scriptURI, content, language, purpose, param_types, param_names, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                       callParams.content = content;
                       callParams.language = language;
                       callParams.purpose = purpose;
                       callParams.param_types = param_types;
                       callParams.param_names = param_names;
                    var theName = "putRawScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for runScript
        runScript: function(scriptURI, parameters, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                       callParams.parameters = parameters;
                    var theName = "runScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for runScriptExtended
        runScriptExtended: function(scriptURI, parameters, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                       callParams.parameters = parameters;
                    var theName = "runScriptExtended";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for checkScript
        checkScript: function(scriptURI, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                    var theName = "checkScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for createREPLSession
        createREPLSession: function(callback) {
                    var callParams = {};
                    var theName = "createREPLSession";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for destroyREPLSession
        destroyREPLSession: function(sessionId, callback) {
                    var callParams = {};
                       callParams.sessionId = sessionId;
                    var theName = "destroyREPLSession";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for evaluateREPL
        evaluateREPL: function(sessionId, line, callback) {
                    var callParams = {};
                       callParams.sessionId = sessionId;
                       callParams.line = line;
                    var theName = "evaluateREPL";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for archiveOldREPLSessions
        archiveOldREPLSessions: function(ageInMinutes, callback) {
                    var callParams = {};
                       callParams.ageInMinutes = ageInMinutes;
                    var theName = "archiveOldREPLSessions";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for createSnippet
        createSnippet: function(snippetURI, snippet, callback) {
                    var callParams = {};
                       callParams.snippetURI = snippetURI;
                       callParams.snippet = snippet;
                    var theName = "createSnippet";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for getSnippetChildren
        getSnippetChildren: function(prefix, callback) {
                    var callParams = {};
                       callParams.prefix = prefix;
                    var theName = "getSnippetChildren";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for deleteSnippet
        deleteSnippet: function(snippetURI, callback) {
                    var callParams = {};
                       callParams.snippetURI = snippetURI;
                    var theName = "deleteSnippet";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for getSnippet
        getSnippet: function(snippetURI, callback) {
                    var callParams = {};
                       callParams.snippetURI = snippetURI;
                    var theName = "getSnippet";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for getLockProvidersForAuthority
        getLockProvidersForAuthority: function(providerURI, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                    var theName = "getLockProvidersForAuthority";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for createLockProvider
        createLockProvider: function(providerURI, config, pathPosition, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                       callParams.config = config;
                       callParams.pathPosition = pathPosition;
                    var theName = "createLockProvider";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for doesLockProviderExist
        doesLockProviderExist: function(providerURI, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                    var theName = "doesLockProviderExist";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for getLockProvider
        getLockProvider: function(providerURI, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                    var theName = "getLockProvider";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for deleteLockProvider
        deleteLockProvider: function(providerURI, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                    var theName = "deleteLockProvider";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for acquireLock
        acquireLock: function(providerURI, lockName, secondsToWait, secondsToKeep, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                       callParams.lockName = lockName;
                       callParams.secondsToWait = secondsToWait;
                       callParams.secondsToKeep = secondsToKeep;
                    var theName = "acquireLock";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for acquireLockWithContext
        acquireLockWithContext: function(providerURI, lockName, localContext, secondsToWait, secondsToKeep, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                       callParams.lockName = lockName;
                       callParams.localContext = localContext;
                       callParams.secondsToWait = secondsToWait;
                       callParams.secondsToKeep = secondsToKeep;
                    var theName = "acquireLockWithContext";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for releaseLock
        releaseLock: function(providerURI, lockName, lockHandle, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                       callParams.lockName = lockName;
                       callParams.lockHandle = lockHandle;
                    var theName = "releaseLock";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for breakLock
        breakLock: function(providerURI, lockName, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                       callParams.lockName = lockName;
                    var theName = "breakLock";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for releaseLockWithContext
        releaseLockWithContext: function(providerURI, lockName, lockHandle, localContext, callback) {
                    var callParams = {};
                       callParams.providerURI = providerURI;
                       callParams.lockName = lockName;
                       callParams.lockHandle = lockHandle;
                       callParams.localContext = localContext;
                    var theName = "releaseLockWithContext";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for setupDefaultProviders
        setupDefaultProviders: function(force, callback) {
                    var callParams = {};
                       callParams.force = force;
                    var theName = "setupDefaultProviders";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for getAllNotificationProviders
        getAllNotificationProviders: function(callback) {
                    var callParams = {};
                    var theName = "getAllNotificationProviders";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(notificationNamePrefix, callback) {
                    var callParams = {};
                       callParams.notificationNamePrefix = notificationNamePrefix;
                    var theName = "getChildren";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for getNotificationProviders
        getNotificationProviders: function(purpose, callback) {
                    var callParams = {};
                       callParams.purpose = purpose;
                    var theName = "getNotificationProviders";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for createNotificationProvider
        createNotificationProvider: function(notificationName, config, purpose, callback) {
                    var callParams = {};
                       callParams.notificationName = notificationName;
                       callParams.config = config;
                       callParams.purpose = purpose;
                    var theName = "createNotificationProvider";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for doesNotificationProviderExist
        doesNotificationProviderExist: function(notificationName, callback) {
                    var callParams = {};
                       callParams.notificationName = notificationName;
                    var theName = "doesNotificationProviderExist";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for getNotificationProvider
        getNotificationProvider: function(notificationName, callback) {
                    var callParams = {};
                       callParams.notificationName = notificationName;
                    var theName = "getNotificationProvider";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for deleteNotificationProvider
        deleteNotificationProvider: function(notificationName, callback) {
                    var callParams = {};
                       callParams.notificationName = notificationName;
                    var theName = "deleteNotificationProvider";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for getEpoch
        getEpoch: function(notificationName, callback) {
                    var callParams = {};
                       callParams.notificationName = notificationName;
                    var theName = "getEpoch";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for publishNotification
        publishNotification: function(notificationName, referenceId, content, contentType, callback) {
                    var callParams = {};
                       callParams.notificationName = notificationName;
                       callParams.referenceId = referenceId;
                       callParams.content = content;
                       callParams.contentType = contentType;
                    var theName = "publishNotification";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for getChanges
        getChanges: function(notificationName, lastEpochSeen, callback) {
                    var callParams = {};
                       callParams.notificationName = notificationName;
                       callParams.lastEpochSeen = lastEpochSeen;
                    var theName = "getChanges";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for getNotification
        getNotification: function(notificationName, id, callback) {
                    var callParams = {};
                       callParams.notificationName = notificationName;
                       callParams.id = id;
                    var theName = "getNotification";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for recordActivity
        recordActivity: function(myId, message, progress, maxProgress, secondToExpire, callback) {
                    var callParams = {};
                       callParams.myId = myId;
                       callParams.message = message;
                       callParams.progress = progress;
                       callParams.maxProgress = maxProgress;
                       callParams.secondToExpire = secondToExpire;
                    var theName = "recordActivity";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for updateActivity
        updateActivity: function(id, myId, message, progress, maxProgress, secondToExpire, callback) {
                    var callParams = {};
                       callParams.id = id;
                       callParams.myId = myId;
                       callParams.message = message;
                       callParams.progress = progress;
                       callParams.maxProgress = maxProgress;
                       callParams.secondToExpire = secondToExpire;
                    var theName = "updateActivity";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for finishActivity
        finishActivity: function(id, myId, message, callback) {
                    var callParams = {};
                       callParams.id = id;
                       callParams.myId = myId;
                       callParams.message = message;
                    var theName = "finishActivity";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for requestAbortActivity
        requestAbortActivity: function(id, myId, callback) {
                    var callParams = {};
                       callParams.id = id;
                       callParams.myId = myId;
                    var theName = "requestAbortActivity";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for getActivities
        getActivities: function(callback) {
                    var callParams = {};
                    var theName = "getActivities";
                    _genCall("Notification", theName, callParams, callback);
        },
        // Function for createTable
        createTable: function(indexURI, config, callback) {
                    var callParams = {};
                       callParams.indexURI = indexURI;
                       callParams.config = config;
                    var theName = "createTable";
                    _genCall("Table", theName, callParams, callback);
        },
        // Function for getTablesForAuthority
        getTablesForAuthority: function(authority, callback) {
                    var callParams = {};
                       callParams.authority = authority;
                    var theName = "getTablesForAuthority";
                    _genCall("Table", theName, callParams, callback);
        },
        // Function for getTable
        getTable: function(indexURI, callback) {
                    var callParams = {};
                       callParams.indexURI = indexURI;
                    var theName = "getTable";
                    _genCall("Table", theName, callParams, callback);
        },
        // Function for deleteTable
        deleteTable: function(indexURI, callback) {
                    var callParams = {};
                       callParams.indexURI = indexURI;
                    var theName = "deleteTable";
                    _genCall("Table", theName, callParams, callback);
        },
        // Function for queryTable
        queryTable: function(indexURI, query, callback) {
                    var callParams = {};
                       callParams.indexURI = indexURI;
                       callParams.query = query;
                    var theName = "queryTable";
                    _genCall("Table", theName, callParams, callback);
        },
        // Function for createIndex
        createIndex: function(indexURI, config, callback) {
                    var callParams = {};
                       callParams.indexURI = indexURI;
                       callParams.config = config;
                    var theName = "createIndex";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for getIndex
        getIndex: function(indexURI, callback) {
                    var callParams = {};
                       callParams.indexURI = indexURI;
                    var theName = "getIndex";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for deleteIndex
        deleteIndex: function(indexURI, callback) {
                    var callParams = {};
                       callParams.indexURI = indexURI;
                    var theName = "deleteIndex";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for queryIndex
        queryIndex: function(indexURI, query, callback) {
                    var callParams = {};
                       callParams.indexURI = indexURI;
                       callParams.query = query;
                    var theName = "queryIndex";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for getSystemProperties
        getSystemProperties: function(keys, callback) {
                    var callParams = {};
                       callParams.keys = keys;
                    var theName = "getSystemProperties";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getRepoConfig
        getRepoConfig: function(callback) {
                    var callParams = {};
                    var theName = "getRepoConfig";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getSessionsForUser
        getSessionsForUser: function(user, callback) {
                    var callParams = {};
                       callParams.user = user;
                    var theName = "getSessionsForUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getTags
        getTags: function(raptureURI, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                    var theName = "getTags";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for deleteUser
        deleteUser: function(userName, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                    var theName = "deleteUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for destroyUser
        destroyUser: function(userName, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                    var theName = "destroyUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for restoreUser
        restoreUser: function(userName, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                    var theName = "restoreUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for addUser
        addUser: function(userName, description, hashPassword, email, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                       callParams.description = description;
                       callParams.hashPassword = hashPassword;
                       callParams.email = email;
                    var theName = "addUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for doesUserExist
        doesUserExist: function(userName, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                    var theName = "doesUserExist";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getUser
        getUser: function(userName, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                    var theName = "getUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for generateApiUser
        generateApiUser: function(prefix, description, callback) {
                    var callParams = {};
                       callParams.prefix = prefix;
                       callParams.description = description;
                    var theName = "generateApiUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for resetUserPassword
        resetUserPassword: function(userName, newHashPassword, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                       callParams.newHashPassword = newHashPassword;
                    var theName = "resetUserPassword";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for updateUserEmail
        updateUserEmail: function(userName, newEmail, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                       callParams.newEmail = newEmail;
                    var theName = "updateUserEmail";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getRemotes
        getRemotes: function(callback) {
                    var callParams = {};
                    var theName = "getRemotes";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for addRemote
        addRemote: function(name, description, url, apiKey, optP, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.description = description;
                       callParams.url = url;
                       callParams.apiKey = apiKey;
                       callParams.optP = optP;
                    var theName = "addRemote";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for deleteRemote
        deleteRemote: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deleteRemote";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for updateRemoteApiKey
        updateRemoteApiKey: function(name, apiKey, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.apiKey = apiKey;
                    var theName = "updateRemoteApiKey";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for setRemote
        setRemote: function(raptureURI, remote, remoteURI, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.remote = remote;
                       callParams.remoteURI = remoteURI;
                    var theName = "setRemote";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for clearRemote
        clearRemote: function(raptureURI, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                    var theName = "clearRemote";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for pullRemote
        pullRemote: function(raptureURI, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                    var theName = "pullRemote";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for addTemplate
        addTemplate: function(name, template, overwrite, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.template = template;
                       callParams.overwrite = overwrite;
                    var theName = "addTemplate";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for runTemplate
        runTemplate: function(name, parameters, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.parameters = parameters;
                    var theName = "runTemplate";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getTemplate
        getTemplate: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "getTemplate";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for copyDocumentRepo
        copyDocumentRepo: function(srcAuthority, targAuthority, wipe, callback) {
                    var callParams = {};
                       callParams.srcAuthority = srcAuthority;
                       callParams.targAuthority = targAuthority;
                       callParams.wipe = wipe;
                    var theName = "copyDocumentRepo";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for addIPToWhiteList
        addIPToWhiteList: function(ipAddress, callback) {
                    var callParams = {};
                       callParams.ipAddress = ipAddress;
                    var theName = "addIPToWhiteList";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for removeIPFromWhiteList
        removeIPFromWhiteList: function(ipAddress, callback) {
                    var callParams = {};
                       callParams.ipAddress = ipAddress;
                    var theName = "removeIPFromWhiteList";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getIPWhiteList
        getIPWhiteList: function(callback) {
                    var callParams = {};
                    var theName = "getIPWhiteList";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for runBatchScript
        runBatchScript: function(script, callback) {
                    var callParams = {};
                       callParams.script = script;
                    var theName = "runBatchScript";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getAllUsers
        getAllUsers: function(callback) {
                    var callParams = {};
                    var theName = "getAllUsers";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for initiateTypeConversion
        initiateTypeConversion: function(raptureURI, newConfig, versionsToKeep, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.newConfig = newConfig;
                       callParams.versionsToKeep = versionsToKeep;
                    var theName = "initiateTypeConversion";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for putArchiveConfig
        putArchiveConfig: function(raptureURI, config, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.config = config;
                    var theName = "putArchiveConfig";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getArchiveConfig
        getArchiveConfig: function(raptureURI, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                    var theName = "getArchiveConfig";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for deleteArchiveConfig
        deleteArchiveConfig: function(raptureURI, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                    var theName = "deleteArchiveConfig";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for ping
        ping: function(callback) {
                    var callParams = {};
                    var theName = "ping";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for addMetadata
        addMetadata: function(values, overwrite, callback) {
                    var callParams = {};
                       callParams.values = values;
                       callParams.overwrite = overwrite;
                    var theName = "addMetadata";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for setMOTD
        setMOTD: function(message, callback) {
                    var callParams = {};
                       callParams.message = message;
                    var theName = "setMOTD";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getMOTD
        getMOTD: function(callback) {
                    var callParams = {};
                    var theName = "getMOTD";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for setEnvironmentName
        setEnvironmentName: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "setEnvironmentName";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for setEnvironmentProperties
        setEnvironmentProperties: function(properties, callback) {
                    var callParams = {};
                       callParams.properties = properties;
                    var theName = "setEnvironmentProperties";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getEnvironmentName
        getEnvironmentName: function(callback) {
                    var callParams = {};
                    var theName = "getEnvironmentName";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getEnvironmentProperties
        getEnvironmentProperties: function(callback) {
                    var callParams = {};
                    var theName = "getEnvironmentProperties";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for encode
        encode: function(toEncode, callback) {
                    var callParams = {};
                       callParams.toEncode = toEncode;
                    var theName = "encode";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for createURI
        createURI: function(path, leaf, callback) {
                    var callParams = {};
                       callParams.path = path;
                       callParams.leaf = leaf;
                    var theName = "createURI";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for createMultipartURI
        createMultipartURI: function(elements, callback) {
                    var callParams = {};
                       callParams.elements = elements;
                    var theName = "createMultipartURI";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for decode
        decode: function(encoded, callback) {
                    var callParams = {};
                       callParams.encoded = encoded;
                    var theName = "decode";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getFountains
        getFountains: function(authority, callback) {
                    var callParams = {};
                       callParams.authority = authority;
                    var theName = "getFountains";
                    _genCall("Fountain", theName, callParams, callback);
        },
        // Function for getFountain
        getFountain: function(fountainURI, callback) {
                    var callParams = {};
                       callParams.fountainURI = fountainURI;
                    var theName = "getFountain";
                    _genCall("Fountain", theName, callParams, callback);
        },
        // Function for createFountain
        createFountain: function(fountainURI, config, callback) {
                    var callParams = {};
                       callParams.fountainURI = fountainURI;
                       callParams.config = config;
                    var theName = "createFountain";
                    _genCall("Fountain", theName, callParams, callback);
        },
        // Function for doesFountainExist
        doesFountainExist: function(fountainURI, callback) {
                    var callParams = {};
                       callParams.fountainURI = fountainURI;
                    var theName = "doesFountainExist";
                    _genCall("Fountain", theName, callParams, callback);
        },
        // Function for deleteFountain
        deleteFountain: function(fountainURI, callback) {
                    var callParams = {};
                       callParams.fountainURI = fountainURI;
                    var theName = "deleteFountain";
                    _genCall("Fountain", theName, callParams, callback);
        },
        // Function for resetFountain
        resetFountain: function(fountainURI, count, callback) {
                    var callParams = {};
                       callParams.fountainURI = fountainURI;
                       callParams.count = count;
                    var theName = "resetFountain";
                    _genCall("Fountain", theName, callParams, callback);
        },
        // Function for incrementFountain
        incrementFountain: function(fountainURI, amount, callback) {
                    var callParams = {};
                       callParams.fountainURI = fountainURI;
                       callParams.amount = amount;
                    var theName = "incrementFountain";
                    _genCall("Fountain", theName, callParams, callback);
        },
        // Function for setupDefaultFountains
        setupDefaultFountains: function(force, callback) {
                    var callParams = {};
                       callParams.force = force;
                    var theName = "setupDefaultFountains";
                    _genCall("Fountain", theName, callParams, callback);
        },
        // Function for getEntitlements
        getEntitlements: function(callback) {
                    var callParams = {};
                    var theName = "getEntitlements";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for getEntitlement
        getEntitlement: function(entitlementName, callback) {
                    var callParams = {};
                       callParams.entitlementName = entitlementName;
                    var theName = "getEntitlement";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for getEntitlementByAddress
        getEntitlementByAddress: function(entitlementURI, callback) {
                    var callParams = {};
                       callParams.entitlementURI = entitlementURI;
                    var theName = "getEntitlementByAddress";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for getEntitlementGroup
        getEntitlementGroup: function(groupName, callback) {
                    var callParams = {};
                       callParams.groupName = groupName;
                    var theName = "getEntitlementGroup";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for getEntitlementGroupByAddress
        getEntitlementGroupByAddress: function(groupURI, callback) {
                    var callParams = {};
                       callParams.groupURI = groupURI;
                    var theName = "getEntitlementGroupByAddress";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for getEntitlementGroups
        getEntitlementGroups: function(callback) {
                    var callParams = {};
                    var theName = "getEntitlementGroups";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for addEntitlement
        addEntitlement: function(entitlementName, initialGroup, callback) {
                    var callParams = {};
                       callParams.entitlementName = entitlementName;
                       callParams.initialGroup = initialGroup;
                    var theName = "addEntitlement";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for addGroupToEntitlement
        addGroupToEntitlement: function(entitlementName, groupName, callback) {
                    var callParams = {};
                       callParams.entitlementName = entitlementName;
                       callParams.groupName = groupName;
                    var theName = "addGroupToEntitlement";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for removeGroupFromEntitlement
        removeGroupFromEntitlement: function(entitlementName, groupName, callback) {
                    var callParams = {};
                       callParams.entitlementName = entitlementName;
                       callParams.groupName = groupName;
                    var theName = "removeGroupFromEntitlement";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for deleteEntitlement
        deleteEntitlement: function(entitlementName, callback) {
                    var callParams = {};
                       callParams.entitlementName = entitlementName;
                    var theName = "deleteEntitlement";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for deleteEntitlementGroup
        deleteEntitlementGroup: function(groupName, callback) {
                    var callParams = {};
                       callParams.groupName = groupName;
                    var theName = "deleteEntitlementGroup";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for addEntitlementGroup
        addEntitlementGroup: function(groupName, callback) {
                    var callParams = {};
                       callParams.groupName = groupName;
                    var theName = "addEntitlementGroup";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for addUserToEntitlementGroup
        addUserToEntitlementGroup: function(groupName, userName, callback) {
                    var callParams = {};
                       callParams.groupName = groupName;
                       callParams.userName = userName;
                    var theName = "addUserToEntitlementGroup";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for removeUserFromEntitlementGroup
        removeUserFromEntitlementGroup: function(groupName, userName, callback) {
                    var callParams = {};
                       callParams.groupName = groupName;
                       callParams.userName = userName;
                    var theName = "removeUserFromEntitlementGroup";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for getWhoAmI
        getWhoAmI: function(callback) {
                    var callParams = {};
                    var theName = "getWhoAmI";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for logoutUser
        logoutUser: function(callback) {
                    var callParams = {};
                    var theName = "logoutUser";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for storePreference
        storePreference: function(category, name, content, callback) {
                    var callParams = {};
                       callParams.category = category;
                       callParams.name = name;
                       callParams.content = content;
                    var theName = "storePreference";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getPreference
        getPreference: function(category, name, callback) {
                    var callParams = {};
                       callParams.category = category;
                       callParams.name = name;
                    var theName = "getPreference";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for removePreference
        removePreference: function(category, name, callback) {
                    var callParams = {};
                       callParams.category = category;
                       callParams.name = name;
                    var theName = "removePreference";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getPreferenceCategories
        getPreferenceCategories: function(callback) {
                    var callParams = {};
                    var theName = "getPreferenceCategories";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getPreferencesInCategory
        getPreferencesInCategory: function(category, callback) {
                    var callParams = {};
                       callParams.category = category;
                    var theName = "getPreferencesInCategory";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for updateMyDescription
        updateMyDescription: function(description, callback) {
                    var callParams = {};
                       callParams.description = description;
                    var theName = "updateMyDescription";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for changeMyPassword
        changeMyPassword: function(oldHashPassword, newHashPassword, callback) {
                    var callParams = {};
                       callParams.oldHashPassword = oldHashPassword;
                       callParams.newHashPassword = newHashPassword;
                    var theName = "changeMyPassword";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getServerApiVersion
        getServerApiVersion: function(callback) {
                    var callParams = {};
                    var theName = "getServerApiVersion";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for runFilterCubeView
        runFilterCubeView: function(typeURI, scriptURI, filterParams, groupFields, columnFields, callback) {
                    var callParams = {};
                       callParams.typeURI = typeURI;
                       callParams.scriptURI = scriptURI;
                       callParams.filterParams = filterParams;
                       callParams.groupFields = groupFields;
                       callParams.columnFields = columnFields;
                    var theName = "runFilterCubeView";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for runNativeQuery
        runNativeQuery: function(typeURI, repoType, queryParams, callback) {
                    var callParams = {};
                       callParams.typeURI = typeURI;
                       callParams.repoType = repoType;
                       callParams.queryParams = queryParams;
                    var theName = "runNativeQuery";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for runNativeFilterCubeView
        runNativeFilterCubeView: function(typeURI, repoType, queryParams, groupFields, columnFields, callback) {
                    var callParams = {};
                       callParams.typeURI = typeURI;
                       callParams.repoType = repoType;
                       callParams.queryParams = queryParams;
                       callParams.groupFields = groupFields;
                       callParams.columnFields = columnFields;
                    var theName = "runNativeFilterCubeView";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for isPermitted
        isPermitted: function(apiCall, callParam, callback) {
                    var callParams = {};
                       callParams.apiCall = apiCall;
                       callParams.callParam = callParam;
                    var theName = "isPermitted";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for createJob
        createJob: function(jobURI, description, scriptURI, cronExpression, timeZone, jobParams, autoActivate, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                       callParams.description = description;
                       callParams.scriptURI = scriptURI;
                       callParams.cronExpression = cronExpression;
                       callParams.timeZone = timeZone;
                       callParams.jobParams = jobParams;
                       callParams.autoActivate = autoActivate;
                    var theName = "createJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for createWorkflowJob
        createWorkflowJob: function(jobURI, description, workflowURI, cronExpression, timeZone, jobParams, autoActivate, maxRuntimeMinutes, appStatusNamePattern, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                       callParams.description = description;
                       callParams.workflowURI = workflowURI;
                       callParams.cronExpression = cronExpression;
                       callParams.timeZone = timeZone;
                       callParams.jobParams = jobParams;
                       callParams.autoActivate = autoActivate;
                       callParams.maxRuntimeMinutes = maxRuntimeMinutes;
                       callParams.appStatusNamePattern = appStatusNamePattern;
                    var theName = "createWorkflowJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for activateJob
        activateJob: function(jobURI, extraParams, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                       callParams.extraParams = extraParams;
                    var theName = "activateJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for deactivateJob
        deactivateJob: function(jobURI, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                    var theName = "deactivateJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for retrieveJob
        retrieveJob: function(jobURI, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                    var theName = "retrieveJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for retrieveJobs
        retrieveJobs: function(uriPrefix, callback) {
                    var callParams = {};
                       callParams.uriPrefix = uriPrefix;
                    var theName = "retrieveJobs";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for runJobNow
        runJobNow: function(jobURI, extraParams, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                       callParams.extraParams = extraParams;
                    var theName = "runJobNow";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for resetJob
        resetJob: function(jobURI, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                    var theName = "resetJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for retrieveJobExec
        retrieveJobExec: function(jobURI, execTime, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                       callParams.execTime = execTime;
                    var theName = "retrieveJobExec";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for deleteJob
        deleteJob: function(jobURI, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                    var theName = "deleteJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for getJobs
        getJobs: function(callback) {
                    var callParams = {};
                    var theName = "getJobs";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for getUpcomingJobs
        getUpcomingJobs: function(callback) {
                    var callParams = {};
                    var theName = "getUpcomingJobs";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for getWorkflowExecsStatus
        getWorkflowExecsStatus: function(callback) {
                    var callParams = {};
                    var theName = "getWorkflowExecsStatus";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for ackJobError
        ackJobError: function(jobURI, execTime, jobErrorType, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                       callParams.execTime = execTime;
                       callParams.jobErrorType = jobErrorType;
                    var theName = "ackJobError";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for getNextExec
        getNextExec: function(jobURI, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                    var theName = "getNextExec";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for getJobExecs
        getJobExecs: function(jobURI, start, count, reversed, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                       callParams.start = start;
                       callParams.count = count;
                       callParams.reversed = reversed;
                    var theName = "getJobExecs";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for batchGetJobExecs
        batchGetJobExecs: function(jobURI, start, count, reversed, callback) {
                    var callParams = {};
                       callParams.jobURI = jobURI;
                       callParams.start = start;
                       callParams.count = count;
                       callParams.reversed = reversed;
                    var theName = "batchGetJobExecs";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for isJobReadyToRun
        isJobReadyToRun: function(toJobURI, callback) {
                    var callParams = {};
                       callParams.toJobURI = toJobURI;
                    var theName = "isJobReadyToRun";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for getCurrentWeekTimeRecords
        getCurrentWeekTimeRecords: function(weekOffsetfromNow, callback) {
                    var callParams = {};
                       callParams.weekOffsetfromNow = weekOffsetfromNow;
                    var theName = "getCurrentWeekTimeRecords";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for getCurrentDayJobs
        getCurrentDayJobs: function(callback) {
                    var callParams = {};
                    var theName = "getCurrentDayJobs";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for getEvent
        getEvent: function(eventURI, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                    var theName = "getEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for putEvent
        putEvent: function(event, callback) {
                    var callParams = {};
                       callParams.event = event;
                    var theName = "putEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for deleteEvent
        deleteEvent: function(eventURI, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                    var theName = "deleteEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(eventURIPrefix, callback) {
                    var callParams = {};
                       callParams.eventURIPrefix = eventURIPrefix;
                    var theName = "getChildren";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for attachScriptToEvent
        attachScriptToEvent: function(eventURI, scriptURI, performOnce, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.scriptURI = scriptURI;
                       callParams.performOnce = performOnce;
                    var theName = "attachScriptToEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for removeScriptFromEvent
        removeScriptFromEvent: function(eventURI, scriptURI, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.scriptURI = scriptURI;
                    var theName = "removeScriptFromEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for attachMessageToEvent
        attachMessageToEvent: function(eventURI, name, pipeline, params, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.name = name;
                       callParams.pipeline = pipeline;
                       callParams.params = params;
                    var theName = "attachMessageToEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for removeMessageFromEvent
        removeMessageFromEvent: function(eventURI, name, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.name = name;
                    var theName = "removeMessageFromEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for attachNotificationToEvent
        attachNotificationToEvent: function(eventURI, name, notification, params, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.name = name;
                       callParams.notification = notification;
                       callParams.params = params;
                    var theName = "attachNotificationToEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for removeNotificationFromEvent
        removeNotificationFromEvent: function(eventURI, name, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.name = name;
                    var theName = "removeNotificationFromEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for attachWorkflowToEvent
        attachWorkflowToEvent: function(eventURI, name, workflowUri, params, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.name = name;
                       callParams.workflowUri = workflowUri;
                       callParams.params = params;
                    var theName = "attachWorkflowToEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for removeWorkflowFromEvent
        removeWorkflowFromEvent: function(eventURI, name, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.name = name;
                    var theName = "removeWorkflowFromEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for fireEvent
        fireEvent: function(eventURI, associatedURI, eventContext, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.associatedURI = associatedURI;
                       callParams.eventContext = eventContext;
                    var theName = "fireEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for fireEventWithContextMap
        fireEventWithContextMap: function(eventURI, associatedURI, eventContextMap, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                       callParams.associatedURI = associatedURI;
                       callParams.eventContextMap = eventContextMap;
                    var theName = "fireEventWithContextMap";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for doesEventExist
        doesEventExist: function(eventURI, callback) {
                    var callParams = {};
                       callParams.eventURI = eventURI;
                    var theName = "doesEventExist";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for setup
        setup: function(force, callback) {
                    var callParams = {};
                       callParams.force = force;
                    var theName = "setup";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for createAuditLog
        createAuditLog: function(name, config, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.config = config;
                    var theName = "createAuditLog";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for doesAuditLogExist
        doesAuditLogExist: function(logURI, callback) {
                    var callParams = {};
                       callParams.logURI = logURI;
                    var theName = "doesAuditLogExist";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(prefix, callback) {
                    var callParams = {};
                       callParams.prefix = prefix;
                    var theName = "getChildren";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for deleteAuditLog
        deleteAuditLog: function(logURI, callback) {
                    var callParams = {};
                       callParams.logURI = logURI;
                    var theName = "deleteAuditLog";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for getAuditLog
        getAuditLog: function(logURI, callback) {
                    var callParams = {};
                       callParams.logURI = logURI;
                    var theName = "getAuditLog";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for writeAuditEntry
        writeAuditEntry: function(logURI, category, level, message, callback) {
                    var callParams = {};
                       callParams.logURI = logURI;
                       callParams.category = category;
                       callParams.level = level;
                       callParams.message = message;
                    var theName = "writeAuditEntry";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for writeAuditEntryData
        writeAuditEntryData: function(logURI, category, level, message, data, callback) {
                    var callParams = {};
                       callParams.logURI = logURI;
                       callParams.category = category;
                       callParams.level = level;
                       callParams.message = message;
                       callParams.data = data;
                    var theName = "writeAuditEntryData";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for getRecentLogEntries
        getRecentLogEntries: function(logURI, count, callback) {
                    var callParams = {};
                       callParams.logURI = logURI;
                       callParams.count = count;
                    var theName = "getRecentLogEntries";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for getEntriesSince
        getEntriesSince: function(logURI, when, callback) {
                    var callParams = {};
                       callParams.logURI = logURI;
                       callParams.when = when;
                    var theName = "getEntriesSince";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for postMailboxMessage
        postMailboxMessage: function(mailboxURI, content, callback) {
                    var callParams = {};
                       callParams.mailboxURI = mailboxURI;
                       callParams.content = content;
                    var theName = "postMailboxMessage";
                    _genCall("Mailbox", theName, callParams, callback);
        },
        // Function for moveMailboxMessage
        moveMailboxMessage: function(mailboxMessageURI, newMailboxURI, callback) {
                    var callParams = {};
                       callParams.mailboxMessageURI = mailboxMessageURI;
                       callParams.newMailboxURI = newMailboxURI;
                    var theName = "moveMailboxMessage";
                    _genCall("Mailbox", theName, callParams, callback);
        },
        // Function for setMailboxStorage
        setMailboxStorage: function(mailboxConfig, fountainConfig, callback) {
                    var callParams = {};
                       callParams.mailboxConfig = mailboxConfig;
                       callParams.fountainConfig = fountainConfig;
                    var theName = "setMailboxStorage";
                    _genCall("Mailbox", theName, callParams, callback);
        },
        // Function for getMailboxMessages
        getMailboxMessages: function(mailboxURI, callback) {
                    var callParams = {};
                       callParams.mailboxURI = mailboxURI;
                    var theName = "getMailboxMessages";
                    _genCall("Mailbox", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(authority, callback) {
                    var callParams = {};
                       callParams.authority = authority;
                    var theName = "getChildren";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for getField
        getField: function(fieldURI, callback) {
                    var callParams = {};
                       callParams.fieldURI = fieldURI;
                    var theName = "getField";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for putField
        putField: function(fieldURI, field, callback) {
                    var callParams = {};
                       callParams.fieldURI = fieldURI;
                       callParams.field = field;
                    var theName = "putField";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for doesFieldExist
        doesFieldExist: function(fieldURI, callback) {
                    var callParams = {};
                       callParams.fieldURI = fieldURI;
                    var theName = "doesFieldExist";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for deleteField
        deleteField: function(fieldURI, callback) {
                    var callParams = {};
                       callParams.fieldURI = fieldURI;
                    var theName = "deleteField";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for getFieldsFromDocument
        getFieldsFromDocument: function(docURI, fields, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                       callParams.fields = fields;
                    var theName = "getFieldsFromDocument";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for getFieldsFromContent
        getFieldsFromContent: function(docURI, content, fields, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                       callParams.content = content;
                       callParams.fields = fields;
                    var theName = "getFieldsFromContent";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for createBlobStore
        createBlobStore: function(raptureURI, adapter, options, metaAdapter, metaOptions, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.adapter = adapter;
                       callParams.options = options;
                       callParams.metaAdapter = metaAdapter;
                       callParams.metaOptions = metaOptions;
                    var theName = "createBlobStore";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for createBlobRepo
        createBlobRepo: function(blobRepoURI, config, metaConfig, callback) {
                    var callParams = {};
                       callParams.blobRepoURI = blobRepoURI;
                       callParams.config = config;
                       callParams.metaConfig = metaConfig;
                    var theName = "createBlobRepo";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getBlobRepoConfig
        getBlobRepoConfig: function(blobRepoURI, callback) {
                    var callParams = {};
                       callParams.blobRepoURI = blobRepoURI;
                    var theName = "getBlobRepoConfig";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getAllBlobRepoConfigs
        getAllBlobRepoConfigs: function(callback) {
                    var callParams = {};
                    var theName = "getAllBlobRepoConfigs";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for deleteBlobRepo
        deleteBlobRepo: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "deleteBlobRepo";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for doesBlobRepoExist
        doesBlobRepoExist: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "doesBlobRepoExist";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for doesBlobExist
        doesBlobExist: function(blobURI, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                    var theName = "doesBlobExist";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for createBlob
        createBlob: function(blobURI, contentType, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                       callParams.contentType = contentType;
                    var theName = "createBlob";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for appendToBlob
        appendToBlob: function(blobURI, content, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                       callParams.content = content;
                    var theName = "appendToBlob";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for putBlob
        putBlob: function(blobURI, content, contentType, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                       callParams.content = content;
                       callParams.contentType = contentType;
                    var theName = "putBlob";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getBlob
        getBlob: function(blobURI, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                    var theName = "getBlob";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for deleteBlob
        deleteBlob: function(blobURI, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                    var theName = "deleteBlob";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getBlobSize
        getBlobSize: function(blobURI, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                    var theName = "getBlobSize";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getMetaData
        getMetaData: function(blobURI, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                    var theName = "getMetaData";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getAllChildrenMap
        getAllChildrenMap: function(blobURI, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                    var theName = "getAllChildrenMap";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(blobURI, callback) {
                    var callParams = {};
                       callParams.blobURI = blobURI;
                    var theName = "getChildren";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for createSheetStore
        createSheetStore: function(raptureURI, adapter, options, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.adapter = adapter;
                       callParams.options = options;
                    var theName = "createSheetStore";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for createSheetRepo
        createSheetRepo: function(sheetURI, config, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.config = config;
                    var theName = "createSheetRepo";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getSheetRepoConfig
        getSheetRepoConfig: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "getSheetRepoConfig";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getAllSheetRepoConfigs
        getAllSheetRepoConfigs: function(callback) {
                    var callParams = {};
                    var theName = "getAllSheetRepoConfigs";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for createSheet
        createSheet: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "createSheet";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for deleteSheet
        deleteSheet: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "deleteSheet";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for doesSheetExist
        doesSheetExist: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "doesSheetExist";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for deleteSheetRepo
        deleteSheetRepo: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "deleteSheetRepo";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for doesSheetRepoExist
        doesSheetRepoExist: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "doesSheetRepoExist";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getAllChildrenMap
        getAllChildrenMap: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "getAllChildrenMap";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "getChildren";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for setSheetCell
        setSheetCell: function(sheetURI, row, column, value, dimension, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.row = row;
                       callParams.column = column;
                       callParams.value = value;
                       callParams.dimension = dimension;
                    var theName = "setSheetCell";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for setBulkSheetCell
        setBulkSheetCell: function(sheetURI, startRow, startColumn, values, dimension, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.startRow = startRow;
                       callParams.startColumn = startColumn;
                       callParams.values = values;
                       callParams.dimension = dimension;
                    var theName = "setBulkSheetCell";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for setBlock
        setBlock: function(sheetURI, startRow, startColumn, values, height, width, dimension, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.startRow = startRow;
                       callParams.startColumn = startColumn;
                       callParams.values = values;
                       callParams.height = height;
                       callParams.width = width;
                       callParams.dimension = dimension;
                    var theName = "setBlock";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getSheetCell
        getSheetCell: function(sheetURI, row, column, dimension, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.row = row;
                       callParams.column = column;
                       callParams.dimension = dimension;
                    var theName = "getSheetCell";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for setNamedSheetCell
        setNamedSheetCell: function(sheetURI, rangeName, value, dimension, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.rangeName = rangeName;
                       callParams.value = value;
                       callParams.dimension = dimension;
                    var theName = "setNamedSheetCell";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getNamedSheetCell
        getNamedSheetCell: function(sheetURI, rangeName, dimension, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.rangeName = rangeName;
                       callParams.dimension = dimension;
                    var theName = "getNamedSheetCell";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getAllCells
        getAllCells: function(sheetURI, dimension, epoch, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.dimension = dimension;
                       callParams.epoch = epoch;
                    var theName = "getAllCells";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getSheetAsDisplay
        getSheetAsDisplay: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "getSheetAsDisplay";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for renderSheet
        renderSheet: function(sheetURI, blobURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.blobURI = blobURI;
                    var theName = "renderSheet";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getAllStyles
        getAllStyles: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "getAllStyles";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for removeStyle
        removeStyle: function(sheetURI, styleName, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.styleName = styleName;
                    var theName = "removeStyle";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for createStyle
        createStyle: function(sheetURI, styleName, style, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.styleName = styleName;
                       callParams.style = style;
                    var theName = "createStyle";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getAllScripts
        getAllScripts: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "getAllScripts";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for removeScript
        removeScript: function(sheetURI, scriptName, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.scriptName = scriptName;
                    var theName = "removeScript";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for createScript
        createScript: function(sheetURI, scriptName, script, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.scriptName = scriptName;
                       callParams.script = script;
                    var theName = "createScript";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for runScriptOnSheet
        runScriptOnSheet: function(sheetURI, scriptName, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.scriptName = scriptName;
                    var theName = "runScriptOnSheet";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getSheetScript
        getSheetScript: function(sheetURI, scriptName, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.scriptName = scriptName;
                    var theName = "getSheetScript";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for generateScriptToRecreateSheet
        generateScriptToRecreateSheet: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "generateScriptToRecreateSheet";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getAllRanges
        getAllRanges: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "getAllRanges";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for removeRange
        removeRange: function(sheetURI, rangeName, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.rangeName = rangeName;
                    var theName = "removeRange";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for createRange
        createRange: function(sheetURI, rangeName, range, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.rangeName = rangeName;
                       callParams.range = range;
                    var theName = "createRange";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getAllNotes
        getAllNotes: function(sheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                    var theName = "getAllNotes";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for removeNote
        removeNote: function(sheetURI, noteId, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.noteId = noteId;
                    var theName = "removeNote";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for createNote
        createNote: function(sheetURI, note, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.note = note;
                    var theName = "createNote";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for cloneSheet
        cloneSheet: function(sheetURI, newSheetURI, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.newSheetURI = newSheetURI;
                    var theName = "cloneSheet";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getSheetRangeByName
        getSheetRangeByName: function(sheetURI, rangeName, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.rangeName = rangeName;
                    var theName = "getSheetRangeByName";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getSheetRangeByCoords
        getSheetRangeByCoords: function(sheetURI, startRow, startColumn, endRow, endColumn, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.startRow = startRow;
                       callParams.startColumn = startColumn;
                       callParams.endRow = endRow;
                       callParams.endColumn = endColumn;
                    var theName = "getSheetRangeByCoords";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for deleteColumn
        deleteColumn: function(sheetURI, column, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.column = column;
                    var theName = "deleteColumn";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for deleteRow
        deleteRow: function(sheetURI, row, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.row = row;
                    var theName = "deleteRow";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for deleteCell
        deleteCell: function(sheetURI, row, column, dimension, callback) {
                    var callParams = {};
                       callParams.sheetURI = sheetURI;
                       callParams.row = row;
                       callParams.column = column;
                       callParams.dimension = dimension;
                    var theName = "deleteCell";
                    _genCall("Sheet", theName, callParams, callback);
        },
        // Function for getInstalledFeatures
        getInstalledFeatures: function(callback) {
                    var callParams = {};
                    var theName = "getInstalledFeatures";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for getFeature
        getFeature: function(featureURI, callback) {
                    var callParams = {};
                       callParams.featureURI = featureURI;
                    var theName = "getFeature";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for getFeatureManifest
        getFeatureManifest: function(manifestURI, callback) {
                    var callParams = {};
                       callParams.manifestURI = manifestURI;
                    var theName = "getFeatureManifest";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for recordFeature
        recordFeature: function(feature, callback) {
                    var callParams = {};
                       callParams.feature = feature;
                    var theName = "recordFeature";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for doesFeatureNeedToBeInstalled
        doesFeatureNeedToBeInstalled: function(feature, callback) {
                    var callParams = {};
                       callParams.feature = feature;
                    var theName = "doesFeatureNeedToBeInstalled";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for installFeature
        installFeature: function(manifest, payload, callback) {
                    var callParams = {};
                       callParams.manifest = manifest;
                       callParams.payload = payload;
                    var theName = "installFeature";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for installFeatureItem
        installFeatureItem: function(featureName, item, callback) {
                    var callParams = {};
                       callParams.featureName = featureName;
                       callParams.item = item;
                    var theName = "installFeatureItem";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for uninstallFeatureItem
        uninstallFeatureItem: function(item, callback) {
                    var callParams = {};
                       callParams.item = item;
                    var theName = "uninstallFeatureItem";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for uninstallFeature
        uninstallFeature: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "uninstallFeature";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for unrecordFeature
        unrecordFeature: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "unrecordFeature";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for removeFeatureManifest
        removeFeatureManifest: function(manifestURI, callback) {
                    var callParams = {};
                       callParams.manifestURI = manifestURI;
                    var theName = "removeFeatureManifest";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for downloadURI
        downloadURI: function(uri, callback) {
                    var callParams = {};
                       callParams.uri = uri;
                    var theName = "downloadURI";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for verify
        verify: function(feature, callback) {
                    var callParams = {};
                       callParams.feature = feature;
                    var theName = "verify";
                    _genCall("Feature", theName, callParams, callback);
        },
        // Function for removeServerCategory
        removeServerCategory: function(category, callback) {
                    var callParams = {};
                       callParams.category = category;
                    var theName = "removeServerCategory";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for getServerCategories
        getServerCategories: function(callback) {
                    var callParams = {};
                    var theName = "getServerCategories";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for getBoundExchanges
        getBoundExchanges: function(category, callback) {
                    var callParams = {};
                       callParams.category = category;
                    var theName = "getBoundExchanges";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for deregisterPipelineExchange
        deregisterPipelineExchange: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deregisterPipelineExchange";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for getExchanges
        getExchanges: function(callback) {
                    var callParams = {};
                    var theName = "getExchanges";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for getExchange
        getExchange: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "getExchange";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for publishMessageToCategory
        publishMessageToCategory: function(task, callback) {
                    var callParams = {};
                       callParams.task = task;
                    var theName = "publishMessageToCategory";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for broadcastMessageToCategory
        broadcastMessageToCategory: function(task, callback) {
                    var callParams = {};
                       callParams.task = task;
                    var theName = "broadcastMessageToCategory";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for broadcastMessageToAll
        broadcastMessageToAll: function(task, callback) {
                    var callParams = {};
                       callParams.task = task;
                    var theName = "broadcastMessageToAll";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for getStatus
        getStatus: function(taskId, callback) {
                    var callParams = {};
                       callParams.taskId = taskId;
                    var theName = "getStatus";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for queryTasks
        queryTasks: function(query, callback) {
                    var callParams = {};
                       callParams.query = query;
                    var theName = "queryTasks";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for getLatestTaskEpoch
        getLatestTaskEpoch: function(callback) {
                    var callParams = {};
                    var theName = "getLatestTaskEpoch";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for drainPipeline
        drainPipeline: function(exchange, callback) {
                    var callParams = {};
                       callParams.exchange = exchange;
                    var theName = "drainPipeline";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for registerExchangeDomain
        registerExchangeDomain: function(domainURI, config, callback) {
                    var callParams = {};
                       callParams.domainURI = domainURI;
                       callParams.config = config;
                    var theName = "registerExchangeDomain";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for deregisterExchangeDomain
        deregisterExchangeDomain: function(domainURI, callback) {
                    var callParams = {};
                       callParams.domainURI = domainURI;
                    var theName = "deregisterExchangeDomain";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for getExchangeDomains
        getExchangeDomains: function(callback) {
                    var callParams = {};
                    var theName = "getExchangeDomains";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for setupStandardCategory
        setupStandardCategory: function(category, callback) {
                    var callParams = {};
                       callParams.category = category;
                    var theName = "setupStandardCategory";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for makeRPC
        makeRPC: function(queueName, fnName, params, timeoutInSeconds, callback) {
                    var callParams = {};
                       callParams.queueName = queueName;
                       callParams.fnName = fnName;
                       callParams.params = params;
                       callParams.timeoutInSeconds = timeoutInSeconds;
                    var theName = "makeRPC";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for createTopicExchange
        createTopicExchange: function(domain, exchange, callback) {
                    var callParams = {};
                       callParams.domain = domain;
                       callParams.exchange = exchange;
                    var theName = "createTopicExchange";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for publishTopicMessage
        publishTopicMessage: function(domain, exchange, topic, message, callback) {
                    var callParams = {};
                       callParams.domain = domain;
                       callParams.exchange = exchange;
                       callParams.topic = topic;
                       callParams.message = message;
                    var theName = "publishTopicMessage";
                    _genCall("Pipeline", theName, callParams, callback);
        },
        // Function for asyncReflexScript
        asyncReflexScript: function(reflexScript, parameters, callback) {
                    var callParams = {};
                       callParams.reflexScript = reflexScript;
                       callParams.parameters = parameters;
                    var theName = "asyncReflexScript";
                    _genCall("Async", theName, callParams, callback);
        },
        // Function for asyncReflexReference
        asyncReflexReference: function(scriptURI, parameters, callback) {
                    var callParams = {};
                       callParams.scriptURI = scriptURI;
                       callParams.parameters = parameters;
                    var theName = "asyncReflexReference";
                    _genCall("Async", theName, callParams, callback);
        },
        // Function for asyncStatus
        asyncStatus: function(taskId, callback) {
                    var callParams = {};
                       callParams.taskId = taskId;
                    var theName = "asyncStatus";
                    _genCall("Async", theName, callParams, callback);
        },
        // Function for setupDefaultWorkflows
        setupDefaultWorkflows: function(force, callback) {
                    var callParams = {};
                       callParams.force = force;
                    var theName = "setupDefaultWorkflows";
                    _genCall("Async", theName, callParams, callback);
        },
        // Function for retrieveSystemConfig
        retrieveSystemConfig: function(area, path, callback) {
                    var callParams = {};
                       callParams.area = area;
                       callParams.path = path;
                    var theName = "retrieveSystemConfig";
                    _genCall("Sys", theName, callParams, callback);
        },
        // Function for writeSystemConfig
        writeSystemConfig: function(area, path, content, callback) {
                    var callParams = {};
                       callParams.area = area;
                       callParams.path = path;
                       callParams.content = content;
                    var theName = "writeSystemConfig";
                    _genCall("Sys", theName, callParams, callback);
        },
        // Function for removeSystemConfig
        removeSystemConfig: function(area, path, callback) {
                    var callParams = {};
                       callParams.area = area;
                       callParams.path = path;
                    var theName = "removeSystemConfig";
                    _genCall("Sys", theName, callParams, callback);
        },
        // Function for getSystemFolders
        getSystemFolders: function(area, path, callback) {
                    var callParams = {};
                       callParams.area = area;
                       callParams.path = path;
                    var theName = "getSystemFolders";
                    _genCall("Sys", theName, callParams, callback);
        },
        // Function for createServerGroup
        createServerGroup: function(name, description, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.description = description;
                    var theName = "createServerGroup";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for deleteServerGroup
        deleteServerGroup: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deleteServerGroup";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getAllServerGroups
        getAllServerGroups: function(callback) {
                    var callParams = {};
                    var theName = "getAllServerGroups";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getAllApplicationDefinitions
        getAllApplicationDefinitions: function(callback) {
                    var callParams = {};
                    var theName = "getAllApplicationDefinitions";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getAllLibraryDefinitions
        getAllLibraryDefinitions: function(callback) {
                    var callParams = {};
                    var theName = "getAllLibraryDefinitions";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getAllApplicationInstances
        getAllApplicationInstances: function(callback) {
                    var callParams = {};
                    var theName = "getAllApplicationInstances";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getServerGroup
        getServerGroup: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "getServerGroup";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for addGroupInclusion
        addGroupInclusion: function(name, inclusion, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.inclusion = inclusion;
                    var theName = "addGroupInclusion";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for removeGroupInclusion
        removeGroupInclusion: function(name, inclusion, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.inclusion = inclusion;
                    var theName = "removeGroupInclusion";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for addGroupExclusion
        addGroupExclusion: function(name, exclusion, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.exclusion = exclusion;
                    var theName = "addGroupExclusion";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for removeGroupExclusion
        removeGroupExclusion: function(name, exclusion, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.exclusion = exclusion;
                    var theName = "removeGroupExclusion";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for removeGroupEntry
        removeGroupEntry: function(name, entry, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.entry = entry;
                    var theName = "removeGroupEntry";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for createApplicationDefinition
        createApplicationDefinition: function(name, ver, description, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.ver = ver;
                       callParams.description = description;
                    var theName = "createApplicationDefinition";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for deleteApplicationDefinition
        deleteApplicationDefinition: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deleteApplicationDefinition";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for updateApplicationVersion
        updateApplicationVersion: function(name, ver, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.ver = ver;
                    var theName = "updateApplicationVersion";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for createLibraryDefinition
        createLibraryDefinition: function(name, ver, description, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.ver = ver;
                       callParams.description = description;
                    var theName = "createLibraryDefinition";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for deleteLibraryDefinition
        deleteLibraryDefinition: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deleteLibraryDefinition";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getLibraryDefinition
        getLibraryDefinition: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "getLibraryDefinition";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for updateLibraryVersion
        updateLibraryVersion: function(name, ver, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.ver = ver;
                    var theName = "updateLibraryVersion";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for addLibraryToGroup
        addLibraryToGroup: function(serverGroup, libraryName, callback) {
                    var callParams = {};
                       callParams.serverGroup = serverGroup;
                       callParams.libraryName = libraryName;
                    var theName = "addLibraryToGroup";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for removeLibraryFromGroup
        removeLibraryFromGroup: function(serverGroup, libraryName, callback) {
                    var callParams = {};
                       callParams.serverGroup = serverGroup;
                       callParams.libraryName = libraryName;
                    var theName = "removeLibraryFromGroup";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for createApplicationInstance
        createApplicationInstance: function(name, description, serverGroup, appName, timeRange, retryCount, parameters, apiUser, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.description = description;
                       callParams.serverGroup = serverGroup;
                       callParams.appName = appName;
                       callParams.timeRange = timeRange;
                       callParams.retryCount = retryCount;
                       callParams.parameters = parameters;
                       callParams.apiUser = apiUser;
                    var theName = "createApplicationInstance";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for runApplication
        runApplication: function(appName, queueName, parameterInput, parameterOutput, callback) {
                    var callParams = {};
                       callParams.appName = appName;
                       callParams.queueName = queueName;
                       callParams.parameterInput = parameterInput;
                       callParams.parameterOutput = parameterOutput;
                    var theName = "runApplication";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for runCustomApplication
        runCustomApplication: function(appName, queueName, parameterInput, parameterOutput, customApplicationPath, callback) {
                    var callParams = {};
                       callParams.appName = appName;
                       callParams.queueName = queueName;
                       callParams.parameterInput = parameterInput;
                       callParams.parameterOutput = parameterOutput;
                       callParams.customApplicationPath = customApplicationPath;
                    var theName = "runCustomApplication";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getApplicationStatus
        getApplicationStatus: function(applicationStatusURI, callback) {
                    var callParams = {};
                       callParams.applicationStatusURI = applicationStatusURI;
                    var theName = "getApplicationStatus";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getApplicationStatuses
        getApplicationStatuses: function(date, callback) {
                    var callParams = {};
                       callParams.date = date;
                    var theName = "getApplicationStatuses";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getApplicationStatusDates
        getApplicationStatusDates: function(callback) {
                    var callParams = {};
                    var theName = "getApplicationStatusDates";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for archiveApplicationStatuses
        archiveApplicationStatuses: function(callback) {
                    var callParams = {};
                    var theName = "archiveApplicationStatuses";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for changeApplicationStatus
        changeApplicationStatus: function(applicationStatusURI, statusCode, message, callback) {
                    var callParams = {};
                       callParams.applicationStatusURI = applicationStatusURI;
                       callParams.statusCode = statusCode;
                       callParams.message = message;
                    var theName = "changeApplicationStatus";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for recordStatusMessages
        recordStatusMessages: function(applicationStatusURI, messages, callback) {
                    var callParams = {};
                       callParams.applicationStatusURI = applicationStatusURI;
                       callParams.messages = messages;
                    var theName = "recordStatusMessages";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for terminateApplication
        terminateApplication: function(applicationStatusURI, reasonMessage, callback) {
                    var callParams = {};
                       callParams.applicationStatusURI = applicationStatusURI;
                       callParams.reasonMessage = reasonMessage;
                    var theName = "terminateApplication";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for deleteApplicationInstance
        deleteApplicationInstance: function(name, serverGroup, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.serverGroup = serverGroup;
                    var theName = "deleteApplicationInstance";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getApplicationInstance
        getApplicationInstance: function(name, serverGroup, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.serverGroup = serverGroup;
                    var theName = "getApplicationInstance";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for updateStatus
        updateStatus: function(name, serverGroup, myServer, status, finished, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.serverGroup = serverGroup;
                       callParams.myServer = myServer;
                       callParams.status = status;
                       callParams.finished = finished;
                    var theName = "updateStatus";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getApplicationsForServerGroup
        getApplicationsForServerGroup: function(serverGroup, callback) {
                    var callParams = {};
                       callParams.serverGroup = serverGroup;
                    var theName = "getApplicationsForServerGroup";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getApplicationsForServer
        getApplicationsForServer: function(serverName, callback) {
                    var callParams = {};
                       callParams.serverName = serverName;
                    var theName = "getApplicationsForServer";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getApplicationDefinition
        getApplicationDefinition: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "getApplicationDefinition";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for setRunnerConfig
        setRunnerConfig: function(name, value, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.value = value;
                    var theName = "setRunnerConfig";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for deleteRunnerConfig
        deleteRunnerConfig: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deleteRunnerConfig";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getRunnerConfig
        getRunnerConfig: function(callback) {
                    var callParams = {};
                    var theName = "getRunnerConfig";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for recordRunnerStatus
        recordRunnerStatus: function(serverName, serverGroup, appInstance, appName, status, callback) {
                    var callParams = {};
                       callParams.serverName = serverName;
                       callParams.serverGroup = serverGroup;
                       callParams.appInstance = appInstance;
                       callParams.appName = appName;
                       callParams.status = status;
                    var theName = "recordRunnerStatus";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for recordInstanceCapabilities
        recordInstanceCapabilities: function(serverName, instanceName, capabilities, callback) {
                    var callParams = {};
                       callParams.serverName = serverName;
                       callParams.instanceName = instanceName;
                       callParams.capabilities = capabilities;
                    var theName = "recordInstanceCapabilities";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getCapabilities
        getCapabilities: function(serverName, instanceNames, callback) {
                    var callParams = {};
                       callParams.serverName = serverName;
                       callParams.instanceNames = instanceNames;
                    var theName = "getCapabilities";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getRunnerServers
        getRunnerServers: function(callback) {
                    var callParams = {};
                    var theName = "getRunnerServers";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for getRunnerStatus
        getRunnerStatus: function(serverName, callback) {
                    var callParams = {};
                       callParams.serverName = serverName;
                    var theName = "getRunnerStatus";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for cleanRunnerStatus
        cleanRunnerStatus: function(ageInMinutes, callback) {
                    var callParams = {};
                       callParams.ageInMinutes = ageInMinutes;
                    var theName = "cleanRunnerStatus";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for markForRestart
        markForRestart: function(serverName, name, callback) {
                    var callParams = {};
                       callParams.serverName = serverName;
                       callParams.name = name;
                    var theName = "markForRestart";
                    _genCall("Runner", theName, callParams, callback);
        },
        // Function for createSeriesStore
        createSeriesStore: function(raptureURI, adapter, options, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.adapter = adapter;
                       callParams.options = options;
                    var theName = "createSeriesStore";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for createSeriesRepo
        createSeriesRepo: function(seriesURI, config, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.config = config;
                    var theName = "createSeriesRepo";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for createSeries
        createSeries: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "createSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for validateSeriesRepo
        validateSeriesRepo: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "validateSeriesRepo";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for doesSeriesRepoExist
        doesSeriesRepoExist: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "doesSeriesRepoExist";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for doesSeriesExist
        doesSeriesExist: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "doesSeriesExist";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getSeriesRepoConfig
        getSeriesRepoConfig: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "getSeriesRepoConfig";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getAllSeriesRepoConfigs
        getAllSeriesRepoConfigs: function(callback) {
                    var callParams = {};
                    var theName = "getAllSeriesRepoConfigs";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for deleteSeriesRepo
        deleteSeriesRepo: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "deleteSeriesRepo";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for deleteSeries
        deleteSeries: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "deleteSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for removeFolder
        removeFolder: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "removeFolder";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for addDoubleToSeries
        addDoubleToSeries: function(seriesURI, columnKey, columnValue, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.columnKey = columnKey;
                       callParams.columnValue = columnValue;
                    var theName = "addDoubleToSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for addLongToSeries
        addLongToSeries: function(seriesURI, columnKey, columnValue, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.columnKey = columnKey;
                       callParams.columnValue = columnValue;
                    var theName = "addLongToSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for addStringToSeries
        addStringToSeries: function(seriesURI, columnKey, columnValue, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.columnKey = columnKey;
                       callParams.columnValue = columnValue;
                    var theName = "addStringToSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for addStructureToSeries
        addStructureToSeries: function(seriesURI, columnKey, jsonColumnValue, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.columnKey = columnKey;
                       callParams.jsonColumnValue = jsonColumnValue;
                    var theName = "addStructureToSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for addDoublesToSeries
        addDoublesToSeries: function(seriesURI, columns, values, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.columns = columns;
                       callParams.values = values;
                    var theName = "addDoublesToSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for addLongsToSeries
        addLongsToSeries: function(seriesURI, columns, values, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.columns = columns;
                       callParams.values = values;
                    var theName = "addLongsToSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for addStringsToSeries
        addStringsToSeries: function(seriesURI, columns, values, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.columns = columns;
                       callParams.values = values;
                    var theName = "addStringsToSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for addStructuresToSeries
        addStructuresToSeries: function(seriesURI, columns, jsonValues, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.columns = columns;
                       callParams.jsonValues = jsonValues;
                    var theName = "addStructuresToSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for dropPointsFromSeries
        dropPointsFromSeries: function(seriesURI, columns, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.columns = columns;
                    var theName = "dropPointsFromSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for dropAllPointsFromSeries
        dropAllPointsFromSeries: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "dropAllPointsFromSeries";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getLastPoint
        getLastPoint: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "getLastPoint";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getAllPoints
        getAllPoints: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "getAllPoints";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getPoints
        getPoints: function(seriesURI, startColumn, maxNumber, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.maxNumber = maxNumber;
                    var theName = "getPoints";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getPointsReverse
        getPointsReverse: function(seriesURI, startColumn, maxNumber, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.maxNumber = maxNumber;
                    var theName = "getPointsReverse";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getRange
        getRange: function(seriesURI, startColumn, endColumn, maxNumber, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.endColumn = endColumn;
                       callParams.maxNumber = maxNumber;
                    var theName = "getRange";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getAllFromRange
        getAllFromRange: function(seriesURI, startColumn, endColumn, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.endColumn = endColumn;
                    var theName = "getAllFromRange";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getAllPointsAsDoubles
        getAllPointsAsDoubles: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "getAllPointsAsDoubles";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getPointsAsDoubles
        getPointsAsDoubles: function(seriesURI, startColumn, maxNumber, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.maxNumber = maxNumber;
                    var theName = "getPointsAsDoubles";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getRangeAsDoubles
        getRangeAsDoubles: function(seriesURI, startColumn, endColumn, maxNumber, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.endColumn = endColumn;
                       callParams.maxNumber = maxNumber;
                    var theName = "getRangeAsDoubles";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getAllFromRangeAsDoubles
        getAllFromRangeAsDoubles: function(seriesURI, startColumn, endColumn, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.endColumn = endColumn;
                    var theName = "getAllFromRangeAsDoubles";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getAllPointsAsStrings
        getAllPointsAsStrings: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "getAllPointsAsStrings";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getPointsAsStrings
        getPointsAsStrings: function(seriesURI, startColumn, maxNumber, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.maxNumber = maxNumber;
                    var theName = "getPointsAsStrings";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getRangeAsStrings
        getRangeAsStrings: function(seriesURI, startColumn, endColumn, maxNumber, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.endColumn = endColumn;
                       callParams.maxNumber = maxNumber;
                    var theName = "getRangeAsStrings";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getAllFromRangeAsStrings
        getAllFromRangeAsStrings: function(seriesURI, startColumn, endColumn, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                       callParams.startColumn = startColumn;
                       callParams.endColumn = endColumn;
                    var theName = "getAllFromRangeAsStrings";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for executeSeriesProgram
        executeSeriesProgram: function(program, args, callback) {
                    var callParams = {};
                       callParams.program = program;
                       callParams.args = args;
                    var theName = "executeSeriesProgram";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for executeSeriesProgramQuietly
        executeSeriesProgramQuietly: function(program, args, callback) {
                    var callParams = {};
                       callParams.program = program;
                       callParams.args = args;
                    var theName = "executeSeriesProgramQuietly";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "getChildren";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getAllChildrenMap
        getAllChildrenMap: function(seriesURI, callback) {
                    var callParams = {};
                       callParams.seriesURI = seriesURI;
                    var theName = "getAllChildrenMap";
                    _genCall("Series", theName, callParams, callback);
        },
        // Function for getAllWorkflows
        getAllWorkflows: function(callback) {
                    var callParams = {};
                    var theName = "getAllWorkflows";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getWorkflowChildren
        getWorkflowChildren: function(workflowURI, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                    var theName = "getWorkflowChildren";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getWorkOrderChildren
        getWorkOrderChildren: function(parentPath, callback) {
                    var callParams = {};
                       callParams.parentPath = parentPath;
                    var theName = "getWorkOrderChildren";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for putWorkflow
        putWorkflow: function(workflow, callback) {
                    var callParams = {};
                       callParams.workflow = workflow;
                    var theName = "putWorkflow";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getWorkflow
        getWorkflow: function(workflowURI, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                    var theName = "getWorkflow";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getWorkflowStep
        getWorkflowStep: function(stepURI, callback) {
                    var callParams = {};
                       callParams.stepURI = stepURI;
                    var theName = "getWorkflowStep";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getStepCategory
        getStepCategory: function(stepURI, callback) {
                    var callParams = {};
                       callParams.stepURI = stepURI;
                    var theName = "getStepCategory";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for addStep
        addStep: function(workflowURI, step, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                       callParams.step = step;
                    var theName = "addStep";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for removeStep
        removeStep: function(workflowURI, stepName, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                       callParams.stepName = stepName;
                    var theName = "removeStep";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for addTransition
        addTransition: function(workflowURI, stepName, transition, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                       callParams.stepName = stepName;
                       callParams.transition = transition;
                    var theName = "addTransition";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for removeTransition
        removeTransition: function(workflowURI, stepName, transitionName, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                       callParams.stepName = stepName;
                       callParams.transitionName = transitionName;
                    var theName = "removeTransition";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for deleteWorkflow
        deleteWorkflow: function(workflowURI, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                    var theName = "deleteWorkflow";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for createWorkOrder
        createWorkOrder: function(workflowURI, argsMap, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                       callParams.argsMap = argsMap;
                    var theName = "createWorkOrder";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for createWorkOrderP
        createWorkOrderP: function(workflowURI, argsMap, appStatusUriPattern, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                       callParams.argsMap = argsMap;
                       callParams.appStatusUriPattern = appStatusUriPattern;
                    var theName = "createWorkOrderP";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for releaseWorkOrderLock
        releaseWorkOrderLock: function(workOrderURI, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                    var theName = "releaseWorkOrderLock";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getWorkOrderStatus
        getWorkOrderStatus: function(workOrderURI, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                    var theName = "getWorkOrderStatus";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for writeWorkflowAuditEntry
        writeWorkflowAuditEntry: function(workOrderURI, message, error, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                       callParams.message = message;
                       callParams.error = error;
                    var theName = "writeWorkflowAuditEntry";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getWorkOrdersByDay
        getWorkOrdersByDay: function(startTimeInstant, callback) {
                    var callParams = {};
                       callParams.startTimeInstant = startTimeInstant;
                    var theName = "getWorkOrdersByDay";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getWorkOrder
        getWorkOrder: function(workOrderURI, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                    var theName = "getWorkOrder";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getWorker
        getWorker: function(workOrderURI, workerId, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                       callParams.workerId = workerId;
                    var theName = "getWorker";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for cancelWorkOrder
        cancelWorkOrder: function(workOrderURI, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                    var theName = "cancelWorkOrder";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for resumeWorkOrder
        resumeWorkOrder: function(workOrderURI, resumeStepURI, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                       callParams.resumeStepURI = resumeStepURI;
                    var theName = "resumeWorkOrder";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for wasCancelCalled
        wasCancelCalled: function(workOrderURI, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                    var theName = "wasCancelCalled";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getCancellationDetails
        getCancellationDetails: function(workOrderURI, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                    var theName = "getCancellationDetails";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getWorkOrderDebug
        getWorkOrderDebug: function(workOrderURI, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                    var theName = "getWorkOrderDebug";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for setWorkOrderFountainConfig
        setWorkOrderFountainConfig: function(config, force, callback) {
                    var callParams = {};
                       callParams.config = config;
                       callParams.force = force;
                    var theName = "setWorkOrderFountainConfig";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for setContextLiteral
        setContextLiteral: function(workerURI, varAlias, literalValue, callback) {
                    var callParams = {};
                       callParams.workerURI = workerURI;
                       callParams.varAlias = varAlias;
                       callParams.literalValue = literalValue;
                    var theName = "setContextLiteral";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for setContextLink
        setContextLink: function(workerURI, varAlias, expressionValue, callback) {
                    var callParams = {};
                       callParams.workerURI = workerURI;
                       callParams.varAlias = varAlias;
                       callParams.expressionValue = expressionValue;
                    var theName = "setContextLink";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getContextValue
        getContextValue: function(workerURI, varAlias, callback) {
                    var callParams = {};
                       callParams.workerURI = workerURI;
                       callParams.varAlias = varAlias;
                    var theName = "getContextValue";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for addErrorToContext
        addErrorToContext: function(workerURI, errorWrapper, callback) {
                    var callParams = {};
                       callParams.workerURI = workerURI;
                       callParams.errorWrapper = errorWrapper;
                    var theName = "addErrorToContext";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getErrorsFromContext
        getErrorsFromContext: function(workerURI, callback) {
                    var callParams = {};
                       callParams.workerURI = workerURI;
                    var theName = "getErrorsFromContext";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getExceptionInfo
        getExceptionInfo: function(workOrderURI, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                    var theName = "getExceptionInfo";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for reportStepProgress
        reportStepProgress: function(workerURI, stepStartTime, message, progress, max, callback) {
                    var callParams = {};
                       callParams.workerURI = workerURI;
                       callParams.stepStartTime = stepStartTime;
                       callParams.message = message;
                       callParams.progress = progress;
                       callParams.max = max;
                    var theName = "reportStepProgress";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getAppStatuses
        getAppStatuses: function(prefix, callback) {
                    var callParams = {};
                       callParams.prefix = prefix;
                    var theName = "getAppStatuses";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getAppStatusDetails
        getAppStatusDetails: function(prefix, extraContextValues, callback) {
                    var callParams = {};
                       callParams.prefix = prefix;
                       callParams.extraContextValues = extraContextValues;
                    var theName = "getAppStatusDetails";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getMonthlyMetrics
        getMonthlyMetrics: function(workflowURI, jobURI, argsHashValue, state, callback) {
                    var callParams = {};
                       callParams.workflowURI = workflowURI;
                       callParams.jobURI = jobURI;
                       callParams.argsHashValue = argsHashValue;
                       callParams.state = state;
                    var theName = "getMonthlyMetrics";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for queryLogs
        queryLogs: function(workOrderURI, startTime, endTime, keepAlive, bufferSize, nextBatchId, stepName, stepStartTime, callback) {
                    var callParams = {};
                       callParams.workOrderURI = workOrderURI;
                       callParams.startTime = startTime;
                       callParams.endTime = endTime;
                       callParams.keepAlive = keepAlive;
                       callParams.bufferSize = bufferSize;
                       callParams.nextBatchId = nextBatchId;
                       callParams.stepName = stepName;
                       callParams.stepStartTime = stepStartTime;
                    var theName = "queryLogs";
                    _genCall("Decision", theName, callParams, callback);
        },
        // Function for getContent
        getContent: function(raptureURI, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                    var theName = "getContent";
                    _genCall("Repo", theName, callParams, callback);
        },
        // Function for putContent
        putContent: function(raptureURI, content, comment, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.content = content;
                       callParams.comment = comment;
                    var theName = "putContent";
                    _genCall("Repo", theName, callParams, callback);
        },
        // Function for deleteContent
        deleteContent: function(raptureURI, comment, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.comment = comment;
                    var theName = "deleteContent";
                    _genCall("Repo", theName, callParams, callback);
        },
        // Function for createDocumentStore
        createDocumentStore: function(raptureURI, adapter, options, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.adapter = adapter;
                       callParams.options = options;
                    var theName = "createDocumentStore";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for validate
        validate: function(raptureURI, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                    var theName = "validate";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for createDocumentRepo
        createDocumentRepo: function(raptureURI, config, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                       callParams.config = config;
                    var theName = "createDocumentRepo";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for createDocument
        createDocument: function(documentURI, callback) {
                    var callParams = {};
                       callParams.documentURI = documentURI;
                    var theName = "createDocument";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for doesDocumentRepoExist
        doesDocumentRepoExist: function(raptureURI, callback) {
                    var callParams = {};
                       callParams.raptureURI = raptureURI;
                    var theName = "doesDocumentRepoExist";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for doesDocumentExist
        doesDocumentExist: function(documentURI, callback) {
                    var callParams = {};
                       callParams.documentURI = documentURI;
                    var theName = "doesDocumentExist";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getDocumentRepoConfig
        getDocumentRepoConfig: function(docRepoURI, callback) {
                    var callParams = {};
                       callParams.docRepoURI = docRepoURI;
                    var theName = "getDocumentRepoConfig";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getDocumentRepoStatus
        getDocumentRepoStatus: function(docRepoURI, callback) {
                    var callParams = {};
                       callParams.docRepoURI = docRepoURI;
                    var theName = "getDocumentRepoStatus";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getAllDocumentRepoConfigs
        getAllDocumentRepoConfigs: function(callback) {
                    var callParams = {};
                    var theName = "getAllDocumentRepoConfigs";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for deleteDocumentRepo
        deleteDocumentRepo: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "deleteDocumentRepo";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for archiveVersions
        archiveVersions: function(repoURI, versionLimit, timeLimit, ensureVersionLimit, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                       callParams.versionLimit = versionLimit;
                       callParams.timeLimit = timeLimit;
                       callParams.ensureVersionLimit = ensureVersionLimit;
                    var theName = "archiveVersions";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getMetaContent
        getMetaContent: function(docURI, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                    var theName = "getMetaContent";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getMetaData
        getMetaData: function(docURI, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                    var theName = "getMetaData";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for revertDocument
        revertDocument: function(docURI, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                    var theName = "revertDocument";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getContent
        getContent: function(docURI, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                    var theName = "getContent";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for putContent
        putContent: function(docURI, content, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                       callParams.content = content;
                    var theName = "putContent";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for putContentWithVersion
        putContentWithVersion: function(docURI, content, currentVersion, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                       callParams.content = content;
                       callParams.currentVersion = currentVersion;
                    var theName = "putContentWithVersion";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for putContentWithEventContext
        putContentWithEventContext: function(docURI, content, eventContext, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                       callParams.content = content;
                       callParams.eventContext = eventContext;
                    var theName = "putContentWithEventContext";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for deleteContent
        deleteContent: function(docURI, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                    var theName = "deleteContent";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for renameContent
        renameContent: function(fromDocURI, toDocURI, callback) {
                    var callParams = {};
                       callParams.fromDocURI = fromDocURI;
                       callParams.toDocURI = toDocURI;
                    var theName = "renameContent";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for batchGet
        batchGet: function(docURIs, callback) {
                    var callParams = {};
                       callParams.docURIs = docURIs;
                    var theName = "batchGet";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for batchGetMetaContent
        batchGetMetaContent: function(docURIs, callback) {
                    var callParams = {};
                       callParams.docURIs = docURIs;
                    var theName = "batchGetMetaContent";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for batchExists
        batchExists: function(docURIs, callback) {
                    var callParams = {};
                       callParams.docURIs = docURIs;
                    var theName = "batchExists";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for batchPutContent
        batchPutContent: function(docURIs, contents, callback) {
                    var callParams = {};
                       callParams.docURIs = docURIs;
                       callParams.contents = contents;
                    var theName = "batchPutContent";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for batchRenameContent
        batchRenameContent: function(authority, comment, fromDocURIs, toDocURIs, callback) {
                    var callParams = {};
                       callParams.authority = authority;
                       callParams.comment = comment;
                       callParams.fromDocURIs = fromDocURIs;
                       callParams.toDocURIs = toDocURIs;
                    var theName = "batchRenameContent";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for folderQuery
        folderQuery: function(docURI, depth, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                       callParams.depth = depth;
                    var theName = "folderQuery";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for uptoFolderQuery
        uptoFolderQuery: function(docURI, depth, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                       callParams.depth = depth;
                    var theName = "uptoFolderQuery";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for removeFolder
        removeFolder: function(docURI, force, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                       callParams.force = force;
                    var theName = "removeFolder";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(docURI, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                    var theName = "getChildren";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getAllChildrenMap
        getAllChildrenMap: function(docURI, callback) {
                    var callParams = {};
                       callParams.docURI = docURI;
                    var theName = "getAllChildrenMap";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for addDocumentAttribute
        addDocumentAttribute: function(attributeURI, value, callback) {
                    var callParams = {};
                       callParams.attributeURI = attributeURI;
                       callParams.value = value;
                    var theName = "addDocumentAttribute";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for addDocumentAttributes
        addDocumentAttributes: function(attributeURI, keys, values, callback) {
                    var callParams = {};
                       callParams.attributeURI = attributeURI;
                       callParams.keys = keys;
                       callParams.values = values;
                    var theName = "addDocumentAttributes";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getDocumentAttribute
        getDocumentAttribute: function(attributeURI, callback) {
                    var callParams = {};
                       callParams.attributeURI = attributeURI;
                    var theName = "getDocumentAttribute";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getDocumentAttributes
        getDocumentAttributes: function(attributeURI, callback) {
                    var callParams = {};
                       callParams.attributeURI = attributeURI;
                    var theName = "getDocumentAttributes";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for removeDocumentAttribute
        removeDocumentAttribute: function(attributeURI, callback) {
                    var callParams = {};
                       callParams.attributeURI = attributeURI;
                    var theName = "removeDocumentAttribute";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getFountainURI
        getFountainURI: function(documentRepoURI, callback) {
                    var callParams = {};
                       callParams.documentRepoURI = documentRepoURI;
                    var theName = "getFountainURI";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for attachFountainToDocumentRepo
        attachFountainToDocumentRepo: function(documentRepoURI, fountainConfig, callback) {
                    var callParams = {};
                       callParams.documentRepoURI = documentRepoURI;
                       callParams.fountainConfig = fountainConfig;
                    var theName = "attachFountainToDocumentRepo";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for getAttachedFountain
        getAttachedFountain: function(documentRepoURI, callback) {
                    var callParams = {};
                       callParams.documentRepoURI = documentRepoURI;
                    var theName = "getAttachedFountain";
                    _genCall("Doc", theName, callParams, callback);
        },
        // Function for createRelationshipRepo
        createRelationshipRepo: function(relationshipRepoURI, config, callback) {
                    var callParams = {};
                       callParams.relationshipRepoURI = relationshipRepoURI;
                       callParams.config = config;
                    var theName = "createRelationshipRepo";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getRelationshipRepoConfig
        getRelationshipRepoConfig: function(blobRepoURI, callback) {
                    var callParams = {};
                       callParams.blobRepoURI = blobRepoURI;
                    var theName = "getRelationshipRepoConfig";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getAllRelationshipRepoConfigs
        getAllRelationshipRepoConfigs: function(callback) {
                    var callParams = {};
                    var theName = "getAllRelationshipRepoConfigs";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for deleteRelationshipRepo
        deleteRelationshipRepo: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "deleteRelationshipRepo";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for doesRelationshipRepoExist
        doesRelationshipRepoExist: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "doesRelationshipRepoExist";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for doesRelationshipExist
        doesRelationshipExist: function(relationshipURI, callback) {
                    var callParams = {};
                       callParams.relationshipURI = relationshipURI;
                    var theName = "doesRelationshipExist";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for createRelationship
        createRelationship: function(relationshipAuthorityURI, fromURI, toURI, label, properties, callback) {
                    var callParams = {};
                       callParams.relationshipAuthorityURI = relationshipAuthorityURI;
                       callParams.fromURI = fromURI;
                       callParams.toURI = toURI;
                       callParams.label = label;
                       callParams.properties = properties;
                    var theName = "createRelationship";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getRelationship
        getRelationship: function(relationshipURI, callback) {
                    var callParams = {};
                       callParams.relationshipURI = relationshipURI;
                    var theName = "getRelationship";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for deleteRelationship
        deleteRelationship: function(relationshipURI, callback) {
                    var callParams = {};
                       callParams.relationshipURI = relationshipURI;
                    var theName = "deleteRelationship";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getOutboundRelationships
        getOutboundRelationships: function(relationshipRepoURI, fromURI, callback) {
                    var callParams = {};
                       callParams.relationshipRepoURI = relationshipRepoURI;
                       callParams.fromURI = fromURI;
                    var theName = "getOutboundRelationships";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getInboundRelationships
        getInboundRelationships: function(relationshipRepoURI, toURI, callback) {
                    var callParams = {};
                       callParams.relationshipRepoURI = relationshipRepoURI;
                       callParams.toURI = toURI;
                    var theName = "getInboundRelationships";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getLabledRelationships
        getLabledRelationships: function(relationshipRepoURI, relationshipLabel, callback) {
                    var callParams = {};
                       callParams.relationshipRepoURI = relationshipRepoURI;
                       callParams.relationshipLabel = relationshipLabel;
                    var theName = "getLabledRelationships";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getChildren
        getChildren: function(prefix, callback) {
                    var callParams = {};
                       callParams.prefix = prefix;
                    var theName = "getChildren";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getAllChildrenMap
        getAllChildrenMap: function(prefix, callback) {
                    var callParams = {};
                       callParams.prefix = prefix;
                    var theName = "getAllChildrenMap";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getRelationshipCenteredOn
        getRelationshipCenteredOn: function(relationshipNodeURI, options, callback) {
                    var callParams = {};
                       callParams.relationshipNodeURI = relationshipNodeURI;
                       callParams.options = options;
                    var theName = "getRelationshipCenteredOn";
                    _genCall("Relationship", theName, callParams, callback);
        },
        // Function for getStringStatMap
        getStringStatMap: function(callback) {
                    var callParams = {};
                    var theName = "getStringStatMap";
                    _genCall("Operations", theName, callParams, callback);
        },
        // Function for getValueStatMap
        getValueStatMap: function(callback) {
                    var callParams = {};
                    var theName = "getValueStatMap";
                    _genCall("Operations", theName, callParams, callback);
        },
        // Function for getNetworkInfo
        getNetworkInfo: function(callback) {
                    var callParams = {};
                    var theName = "getNetworkInfo";
                    _genCall("Environment", theName, callParams, callback);
        },
        // Function for setNetworkInfo
        setNetworkInfo: function(network, callback) {
                    var callParams = {};
                       callParams.network = network;
                    var theName = "setNetworkInfo";
                    _genCall("Environment", theName, callParams, callback);
        },
        // Function for getThisServer
        getThisServer: function(callback) {
                    var callParams = {};
                    var theName = "getThisServer";
                    _genCall("Environment", theName, callParams, callback);
        },
        // Function for getServers
        getServers: function(callback) {
                    var callParams = {};
                    var theName = "getServers";
                    _genCall("Environment", theName, callParams, callback);
        },
        // Function for setThisServer
        setThisServer: function(info, callback) {
                    var callParams = {};
                       callParams.info = info;
                    var theName = "setThisServer";
                    _genCall("Environment", theName, callParams, callback);
        },
        // Function for setApplianceMode
        setApplianceMode: function(mode, callback) {
                    var callParams = {};
                       callParams.mode = mode;
                    var theName = "setApplianceMode";
                    _genCall("Environment", theName, callParams, callback);
        },
        // Function for getApplianceMode
        getApplianceMode: function(callback) {
                    var callParams = {};
                    var theName = "getApplianceMode";
                    _genCall("Environment", theName, callParams, callback);
        },
        // Function for getServerStatus
        getServerStatus: function(callback) {
                    var callParams = {};
                    var theName = "getServerStatus";
                    _genCall("Environment", theName, callParams, callback);
        },
        // Function for getLicenseInfo
        getLicenseInfo: function(callback) {
                    var callParams = {};
                    var theName = "getLicenseInfo";
                    _genCall("Environment", theName, callParams, callback);
        },
        // Function for putTemplate
        putTemplate: function(qTemplateURI, template, callback) {
                    var callParams = {};
                       callParams.qTemplateURI = qTemplateURI;
                       callParams.template = template;
                    var theName = "putTemplate";
                    _genCall("Question", theName, callParams, callback);
        },
        // Function for getTemplate
        getTemplate: function(qTemplateURI, callback) {
                    var callParams = {};
                       callParams.qTemplateURI = qTemplateURI;
                    var theName = "getTemplate";
                    _genCall("Question", theName, callParams, callback);
        },
        // Function for getQuestion
        getQuestion: function(questionURI, callback) {
                    var callParams = {};
                       callParams.questionURI = questionURI;
                    var theName = "getQuestion";
                    _genCall("Question", theName, callParams, callback);
        },
        // Function for askQuestion
        askQuestion: function(qTemplateURI, variables, callback, callback) {
                    var callParams = {};
                       callParams.qTemplateURI = qTemplateURI;
                       callParams.variables = variables;
                       callParams.callback = callback;
                    var theName = "askQuestion";
                    _genCall("Question", theName, callParams, callback);
        },
        // Function for getQNotifications
        getQNotifications: function(search, callback) {
                    var callParams = {};
                       callParams.search = search;
                    var theName = "getQNotifications";
                    _genCall("Question", theName, callParams, callback);
        },
        // Function for getQNotificationURIs
        getQNotificationURIs: function(search, callback) {
                    var callParams = {};
                       callParams.search = search;
                    var theName = "getQNotificationURIs";
                    _genCall("Question", theName, callParams, callback);
        },
        // Function for answerQuestion
        answerQuestion: function(questionURI, response, data, callback) {
                    var callParams = {};
                       callParams.questionURI = questionURI;
                       callParams.response = response;
                       callParams.data = data;
                    var theName = "answerQuestion";
                    _genCall("Question", theName, callParams, callback);
        },
        // Function for createStructuredRepo
        createStructuredRepo: function(repoURI, config, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                       callParams.config = config;
                    var theName = "createStructuredRepo";
                    _genCall("Structured", theName, callParams, callback);
        },
        // Function for createStructuredStore
        createStructuredStore: function(repoURI, adapter, options, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                       callParams.adapter = adapter;
                       callParams.options = options;
                    var theName = "createStructuredStore";
                    _genCall("Structured", theName, callParams, callback);
        },
        // Function for doesStructuredRepoExist
        doesStructuredRepoExist: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "doesStructuredRepoExist";
                    _genCall("Structured", theName, callParams, callback);
        },
        // Function for validateStructuredRepo
        validateStructuredRepo: function(repoURI, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                    var theName = "validateStructuredRepo";
                    _genCall("Structured", theName, callParams, callback);
        },
        // Function for getAllStructuredRepoConfigs
        getAllStructuredRepoConfigs: function(callback) {
                    var callParams = {};
                    var theName = "getAllStructuredRepoConfigs";
                    _genCall("Structured", theName, callParams, callback);
        },
        // Function for addTable
        addTable: function(repoURI, columns, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                       callParams.columns = columns;
                    var theName = "addTable";
                    _genCall("Structured", theName, callParams, callback);
        },
        // Function for addColumns
        addColumns: function(repoURI, columns, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                       callParams.columns = columns;
                    var theName = "addColumns";
                    _genCall("Structured", theName, callParams, callback);
        },
        // Function for removeColumns
        removeColumns: function(repoURI, names, callback) {
                    var callParams = {};
                       callParams.repoURI = repoURI;
                       callParams.names = names;
                    var theName = "removeColumns";
                    _genCall("Structured", theName, callParams, callback);
        },
        // Function for createProcess
        createProcess: function(parent, group, taskName, keyFields, taskContent, taskParameters, callback) {
                    var callParams = {};
                       callParams.parent = parent;
                       callParams.group = group;
                       callParams.taskName = taskName;
                       callParams.keyFields = keyFields;
                       callParams.taskContent = taskContent;
                       callParams.taskParameters = taskParameters;
                    var theName = "createProcess";
                    _genCall("Cluster", theName, callParams, callback);
        },
        // Function for createOffBandProcess
        createOffBandProcess: function(group, taskDescription, callback) {
                    var callParams = {};
                       callParams.group = group;
                       callParams.taskDescription = taskDescription;
                    var theName = "createOffBandProcess";
                    _genCall("Cluster", theName, callParams, callback);
        },
        // Function for getProcessList
        getProcessList: function(callback) {
                    var callParams = {};
                    var theName = "getProcessList";
                    _genCall("Cluster", theName, callParams, callback);
        },
        // Function for getClusterInfo
        getClusterInfo: function(callback) {
                    var callParams = {};
                    var theName = "getClusterInfo";
                    _genCall("Cluster", theName, callParams, callback);
        },
        // Function for getProcessStatus
        getProcessStatus: function(pids, callback) {
                    var callParams = {};
                       callParams.pids = pids;
                    var theName = "getProcessStatus";
                    _genCall("Cluster", theName, callParams, callback);
        },
        // Function for setProcessStatus
        setProcessStatus: function(pid, status, callback) {
                    var callParams = {};
                       callParams.pid = pid;
                       callParams.status = status;
                    var theName = "setProcessStatus";
                    _genCall("Cluster", theName, callParams, callback);
        },
        // Function for getProcessInfo
        getProcessInfo: function(pid, callback) {
                    var callParams = {};
                       callParams.pid = pid;
                    var theName = "getProcessInfo";
                    _genCall("Cluster", theName, callParams, callback);
        },
        // Function for putCacheValue
        putCacheValue: function(pid, key, value, callback) {
                    var callParams = {};
                       callParams.pid = pid;
                       callParams.key = key;
                       callParams.value = value;
                    var theName = "putCacheValue";
                    _genCall("Cluster", theName, callParams, callback);
        },
        // Function for getCacheValue
        getCacheValue: function(pid, key, traverse, def, callback) {
                    var callParams = {};
                       callParams.pid = pid;
                       callParams.key = key;
                       callParams.traverse = traverse;
                       callParams.def = def;
                    var theName = "getCacheValue";
                    _genCall("Cluster", theName, callParams, callback);
        }
        }
    })
})(jQuery);
